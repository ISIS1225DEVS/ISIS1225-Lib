:py:mod:`DISClib.DataStructures.probinghashtable`
=================================================

.. py:module:: DISClib.DataStructures.probinghashtable

.. autoapi-nested-parse::

   # -*- coding: utf-8 -*-
   # TODO add docstring

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.probinghashtable.LinearProbing




Attributes
~~~~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.probinghashtable.DEFAULT_PROBING_ALPHA
   DISClib.DataStructures.probinghashtable.MAX_PROBING_ALPHA
   DISClib.DataStructures.probinghashtable.MIN_PROBING_ALPHA
   DISClib.DataStructures.probinghashtable.EMPTY


.. py:data:: DEFAULT_PROBING_ALPHA
   :type: float
   :value: 0.5

   Factor de carga (alpha) por defecto e ideal para el LinearProbing, por defecto es 0.5.

.. py:data:: MAX_PROBING_ALPHA
   :type: float
   :value: 0.8

   Factor de carga (alpha) máximo para el LinearProbing, por defecto es 8.0.

.. py:data:: MIN_PROBING_ALPHA
   :type: float
   :value: 0.2

   Factor de carga (alpha) mínimo para el LinearProbing, por defecto es 2.0.

.. py:data:: EMPTY
   :value: '__EMPTY__'

   Constante que representa una entrada vacío en el LinearProbing, por defecto es "__EMPTY__".

.. py:class:: LinearProbing


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   *LinearProbing* Es una clase que representa una tabla de hash con el método de encadenamiento por de separación (Separate Chaining). Donde la llave es única para cada valor y el valor puede ser cualquier tipo de dato.

   :param Generic: Tipo de dato genérico dentro del registro del mapa.
   :type Generic: T

   :raises TypeError: error si la información del registro del mapa (llave o valor) no son del tipo adecuado.

   :returns: ADT de tipo LinearProbing o tabla de hash con separación por encadenamiento.
   :rtype: LinearProbing

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: nentries
      :type: int
      :value: 1

      Es el espacio reservado para la tabla de hash (n), por defecto es 1, pero debe configurarse según el número de entradas que se espera almacenar.

   .. py:attribute:: alpha
      :type: Optional[float]

      Es el factor de carga (alpha) con el que se inicializa la tabla de hash, por defecto es 4.0.

   .. py:attribute:: prime
      :type: Optional[int]

      Es el número primo (P) utilizado para calcular el código hash de la llave con la función de compresión MAD, por defecto es 109345121.

   .. py:attribute:: hash_table
      :type: DISClib.DataStructures.arraylist.ArrayList[DISClib.DataStructures.mapentry.MapEntry[DISClib.Utils.default.T]]

      Es el indice de la tabla de hash donde se almacenan los *MapEntry*, implementado con un *ArrayList* de DISCLib. en el *__post_init__()* se inicializa con la capacidad inicial de la tabla de hash.

   .. py:attribute:: rehashable
      :type: bool
      :value: True

      Es un booleano que indica si la tabla de hash se puede reconstruir utilizando el método de rehash, por defecto es True.

   .. py:attribute:: mcapacity
      :type: int
      :value: 1

      Es la capacidad (M) con la que se inicializa la tabla de hash.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos (n) dentro de la tabla de hash, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:attribute:: _collisions
      :type: Optional[int]
      :value: 0

      Es el número de colisiones en la tabla de hash.

   .. py:attribute:: _scale
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _shift
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _cur_alpha
      :type: Optional[float]
      :value: 0

      Es el factor de carga actual de la tabla de hash.

   .. py:attribute:: max_alpha
      :type: Optional[float]

      Es el factor de carga máximo de la tabla de hash, por defecto es 8.0.

   .. py:attribute:: min_alpha
      :type: Optional[float]

      Es el factor de carga mínimo de la tabla de hash, por defecto es 2.0.

   .. py:attribute:: _value_type
      :type: Optional[type]

      Es el tipo de dato de los valores en la entrada que contiene la tabla de hash, por defecto es *None* y se configura al cargar el primera entrada en el mapa.

   .. py:attribute:: _key_type
      :type: Optional[type]

      Es el tipo de dato de las llaves en la entrada que contiene la tabla de hash, por defecto es *None* y se configura al cargar el primera entrada en el mapa.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del LinearProbing, por defecto es *None* y el *__post_init__()* configura la función por defecto *ht_default_cmp_funcion()*.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del LinearProbing, Por defecto es *None* y el *__post_init__()* configura la llave por defecto la llave *id* en *DEFAULT_DICT_KEY*.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto de la estructura LinearProbing después de la inicialización de la misma. Configura los factores de carga (alpha), el número primo (P) para la función de compresión MAD, la capacidad (M) de la tabla de hash, la función de comparación y la llave para comparar los elementos del LinearProbing, y finalmente inicializa la tabla de hash con la capacidad (M) configurada.



   .. py:method:: default_cmp_function(key1, entry2: DISClib.DataStructures.mapentry.MapEntry) -> int

      *default_cmp_function()* procesa la llave existente en la entrada del LinearProbing y la compara con la llave del a entrada que se quiere agregar al LinearProbing.
      :param key1: llave de la primera entrada a comparar.
      :type key1: Any
      :param entry2: segunda entrada (pareja llave-valor) a comparar.
      :type entry2: MapEntry

      :returns: respuesta de la comparación entre los elementos, 0 si las llaves son iguales, 1 si key1 es mayor que la llave de entry2, -1 si key1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el LinearProbing.

      Si se presenta un error en el LinearProbing, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun sea considere conveniente.

      :param err: Excepción que se generó en el LinearProbing.
      :type err: Exception


   .. py:method:: _check_type(entry: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato de la entrada que se quiere agregar al LinearProbing sea del mismo tipo contenido dentro de los elementos del LinearProbing.

      :raises TypeError: error si el tipo de dato de la entrada que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el LinearProbing.

      :param entry: entrada que se quiere procesar en LinearProbing.
      :type entry: T

      :returns: operador que indica si el ADT LinearProbing es del mismo tipo que la entrada que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el LinearProbing está vacío.

      :returns: operador que indica si la estructura LinearProbing está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el numero de elementos que actualmente contiene el LinearProbing.

      :returns: tamaño de la estructura LinearProbing.
      :rtype: int


   .. py:method:: contains(key: DISClib.Utils.default.T) -> bool

      *contains()* responde si el LinearProbing contiene una entrada con la llave key.

      :param key: llave de la entrada (pareja llave-valor) que se quiere buscar en el LinearProbing.
      :type key: T

      :returns: operador que indica si el LinearProbing contiene o no una entrada con la llave key.
      :rtype: bool


   .. py:method:: put(key: DISClib.Utils.default.T, value: DISClib.Utils.default.T) -> None

      *put()* agrega una entrada (pareja llave-valor) al LinearProbing, si la llave ya existe en el LinearProbing, se reemplaza el valor.

      :param key: llave asociada a la nueva entrada.
      :type key: T
      :param value: el valor asociado a la nueva entrada.
      :type value: T

      :raises Exception: si el indice de la entrada en el mapa está fuera de los limites establecidos, se genera un error.


   .. py:method:: get(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *get()* devuelve la entrada (pareja llave-valor) cuya llave sea igual a key dentro del LinearProbing, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada a la entrada que se quiere buscar.
      :type key: T

      :raises Exception: error si la estructura está vacía.

      :returns: entrada (pareja llave-valor) con la llave igual a key dentro del LinearProbing, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: check_bucket(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *check_bucket()* devuelve el bucket asociado a la llave key dentro del LinearProbing, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada al bucket que se quiere buscar.
      :type key: T

      :raises Exception: error si la estructura está vacía.

      :returns: bucket asociado a la llave key dentro del LinearProbing, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: remove(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *remove()* elimina la entrada (pareja llave-valor) cuya llave sea igual a key dentro del LinearProbing, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada a la entrada que se quiere eliminar.
      :type key: T

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la entrada que se quiere eliminar no existe dentro del bucket

      :returns: entrada (pareja llave-valor) que se eliminó del LinearProbing, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: keys() -> DISClib.DataStructures.arraylist.ArrayList[DISClib.Utils.default.T]

      *keys()* devuelve una lista (ArrayList) con todas las llaves de las entradas (parejas llave-valor) del LinearProbing.

      :returns: lista (ArrayList) con todas las llaves del LinearProbing.
      :rtype: ArrayList[T]


   .. py:method:: values() -> DISClib.DataStructures.arraylist.ArrayList[DISClib.Utils.default.T]

      *values()* devuelve una lista (ArrayList) con todos los valores de las entradas (parejas llave-valor) del LinearProbing.

      :returns: lista (ArrayList) con todos los valores del LinearProbing.
      :rtype: ArrayList[T]


   .. py:method:: entries() -> DISClib.DataStructures.arraylist.ArrayList[DISClib.Utils.default.T]

      *entries()* devuelve una lista (ArrayList) con todas las entradas (parejas llave-valor) del LinearProbing.

      :returns: lista (ArrayList) con todas las entradas del LinearProbing.
      :rtype: ArrayList[T]


   .. py:method:: _find_slot(hkey: int, key: DISClib.Utils.default.T) -> int

      _find_slot _summary_

      :param hkey: _description_
      :type hkey: int
      :param key: _description_
      :type key: T

      :returns: _description_
      :rtype: int


   .. py:method:: findSlot2(key, hashvalue, cmpfunction)

      Encuentra una posición libre en la tabla de hash.
      map: la tabla de hash
      key: la llave
      hashvalue: La posición inicial de la llave
      cmpfunction: funcion de comparación para la búsqueda de la llave


   .. py:method:: findSlot3(key, hashvalue, cmpfunction)

      Encuentra una posición libre en la tabla de hash.
      map: la tabla de hash
      key: la llave
      hashvalue: La posición inicial de la llave
      cmpfunction: funcion de comparación para la búsqueda de la llave


   .. py:method:: _is_available(idx: int) -> bool

      _is_available _summary_

      :param idx: _description_
      :type idx: int

      :returns: _description_
      :rtype: bool


   .. py:method:: rehash() -> None

      *rehash()* reconstruye la tabla de hash con una nueva capacidad (M) y un nuevo factor de carga (alpha) según los límites establecidos por el usuario en los atributos *max_alpha* y *min_alpha*.

      Si el factor de carga (alpha) es mayor que el límite superior (max_alpha), se duplica la capacidad (M) buscando el siguiente número primo y se reconstruye la tabla de hash.

      Si el factor de carga (alpha) es menor que el límite inferior (min_alpha), se reduce a la mitad la capacidad (M) de la tabla de hash buscando el siguiente número primo y se reconstruye la tabla de hash.



