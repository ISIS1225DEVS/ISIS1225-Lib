:py:mod:`DISClib.DataStructures`
================================

.. py:module:: DISClib.DataStructures


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   adjcomponents/index.rst
   adjlist/index.rst
   adjmatrix/index.rst
   arraylist/index.rst
   binarysearchtree/index.rst
   bst/index.rst
   chaininghashtable/index.rst
   doublelinkedlist/index.rst
   heap/index.rst
   iminpqnode/index.rst
   indexheap/index.rst
   leftredblacktree/index.rst
   listnode/index.rst
   mapentry/index.rst
   node/index.rst
   probinghashtable/index.rst
   rbt/index.rst
   redblacktree/index.rst
   singlelinkedlist/index.rst
   treenode/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.ArrayList
   DISClib.DataStructures.SingleLinked
   DISClib.DataStructures.DoubleLinked
   DISClib.DataStructures.MapEntry
   DISClib.DataStructures.SeparateChaining
   DISClib.DataStructures.LinearProbing




Attributes
~~~~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.file_path
   DISClib.DataStructures.file_dir


.. py:class:: ArrayList


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **ArrayList** representa la estructura de datos para arreglos dinamicos (Array List), Implementada con Generic[T] y @dataclass para que sea una estructura de datos genérica.

   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo ArrayList o Arreglo Dinámico.
   :rtype: ArrayList

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del ArrayList, por defecto es None y el *__post_init__()* configura la función por defecto *lt_default_cmp_funcion()*.

   .. py:attribute:: elements
      :type: List[DISClib.Utils.default.T]

      Lista nativa de Python que contiene los elementos de la estructura.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del ArrayList, Por defecto es 'None' y el *__post_init__()* configura la llave por defecto la llave 'id' en *DEFAULT_DICT_KEY*.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos que contiene la estructura, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto para la llave ('key') y la función de comparación ('cmp_function'). Si el usuario incluye una lista nativa de python como argumento, se agrega a la lista de elementos del ArrayList.



   .. py:method:: default_cmp_function(elm1, elm2) -> int

      *default_cmp_function()* procesa con algoritmica por defecto la lista de elementos que procesa el ArrayList. Es una función crucial para que la estructura de datos funcione correctamente.

      :param elm1: primer elemento a comparar.
      :type elm1: Any
      :param elm2: segundo elemento a comparar.
      :type elm2: Any

      :returns: respuesta de la comparación entre los elementos, 0 si son iguales, 1 si elm1 es mayor que elm2, -1 si elm1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el ArrayList.

      Si se presenta un error en ArrayList, se formatea el error según el contexto (paquete/clase), la función que lo generó y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun se considere conveniente.

      :param err: Excepción que se generó en el ArrayList.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato del elemento que se quiere agregar al ArrayList sea del mismo tipo contenido dentro de los elementos del ArrayList.

      :raises TypeError: error si el tipo de dato del elemento que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el ArrayList.

      :param element: elemento que se quiere procesar en ArrayList.
      :type element: T

      :returns: operador que indica si el ADT ArrayList es del mismo tipo que el elemento que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el ArrayList está vacía.

      :returns: operador que indica si la estructura ArrayList está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el número de elementos que actualmente contiene el ArrayList.

      :returns: tamaño de la estructura ArrayList.
      :rtype: int


   .. py:method:: add_first(element: DISClib.Utils.default.T) -> None

      *add_first()* adiciona un elemento al inicio del ArrayList.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_last(element: DISClib.Utils.default.T) -> None

      *add_last()* adiciona un elemento al final del ArrayList.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_element(element: DISClib.Utils.default.T, pos: int) -> None

      *add_element()* adiciona un elemento en una posición dada del ArrayList.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T
      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises IndexError: error si la posición es inválida.
      :raises IndexError: error si la estructura está vacía.


   .. py:method:: get_first() -> DISClib.Utils.default.T

      *get_first()* lee el primer elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento del ArrayList.
      :rtype: T


   .. py:method:: get_last() -> DISClib.Utils.default.T

      *get_last()* lee el último elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento del ArrayList.
      :rtype: T


   .. py:method:: get_element(pos: int) -> DISClib.Utils.default.T

      *get_element()* lee un elemento en una posición dada del ArrayList.

      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición es inválida.

      :returns: el elemento en la posición dada del ArrayList.
      :rtype: T


   .. py:method:: remove_first() -> DISClib.Utils.default.T

      *remove_first()* elimina el primer elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento eliminado del ArrayList.
      :rtype: T


   .. py:method:: remove_last() -> DISClib.Utils.default.T

      *remove_last()* elimina el último elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento eliminado del ArrayList.
      :rtype: T


   .. py:method:: remove_element(pos: int) -> DISClib.Utils.default.T

      *remove_element()* elimina un elemento en una posición dada del ArrayList.

      :param pos: índice del que se quiere eliminar el elemento.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.

      :returns: el elemento eliminado del ArrayList.
      :rtype: T


   .. py:method:: compare_elements(elem1: DISClib.Utils.default.T, elem2: DISClib.Utils.default.T) -> int

      *compare_elements()* compara dos elementos dentro del ArrayList según la función de comparación definida por el usuario o la función por defecto.

      :param elem1: Primer elemento a comparar.
      :type elem1: T
      :param elem2: Segundo elemento a comparar.
      :type elem2: T

      :raises TypeError: error si la función de comparación no está definida.

      :returns: -1 si elem1 es menor que elem2, 0 si son iguales, 1 si elem1 es mayor que elem2.
      :rtype: int


   .. py:method:: find(element: DISClib.Utils.default.T) -> int

      *find()* revisa si un elemento está en el ArrayList.

      :param element: elemento que se quiere revisar en el ArrayList.
      :type element: T

      :returns: la posición del elemento en el ArrayList, -1 si no está.
      :rtype: int


   .. py:method:: change_info(new_info: DISClib.Utils.default.T, pos: int) -> None

      *change_info()* cambia la información de un elemento en una posición dada.

      :param new_info: nueva información que se quiere agregar en el elemento.
      :type new_info: T
      :param pos: posición del elemento que se quiere cambiar.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.


   .. py:method:: exchange(pos1: int, pos2: int) -> None

      *exchange()* intercambia la información de dos elementos en dos posiciones dadas.

      :param pos1: posición del primer elemento.
      :type pos1: int
      :param pos2: posición del segundo elemento.
      :type pos2: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición del primer elemento es inválida.
      :raises Exception: error si la posición del segundo elemento es inválida.


   .. py:method:: sublist(start: int, end: int) -> ArrayList[T]

      *sublist()* crea una sublista de la estructura según unas posiciones dentro del ArrayList original.

      :param start: índice inicial de la sublista.
      :type start: int
      :param end: índice final de la sublista.
      :type end: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición inicial o final son inválidas.

      :returns: una sublista de la estructura original con la función de comparación y la llave de la estructura original.
      :rtype: ArrayList[T]


   .. py:method:: concat(other: ArrayList[T]) -> ArrayList[T]

      *concat()* concatena dos estructuras de datos ArrayList para crear una nueva estructura con los elementos de las dos estructuras.

      :param other: estructura de datos ArrayList que se quiere concatenar con la estructura original.
      :type other: ArrayList[T]

      :raises TypeError: error si la estructura que se quiere concatenar no es un ArrayList.
      :raises TypeError: error si la llave de la estructura que se quiere unir no es la misma que la llave de la estructura original.
      :raises TypeError: error si la función de comparación de la estructura que se quiere unir no es la misma que la función de comparación de la estructura original.

      :returns: Estructura de datos original ArrayList que contiene los elementos de las dos estructuras originales.
      :rtype: ArrayList[T]


   .. py:method:: __iter__()

      *__iter__()* iterador nativo de Python intervenida por la estructura de datos para recorrer los elementos del ArrayList utilizando un ciclo 'for' de python.

      :returns: iterador Python sobre los elementos del ArrayList.
      :rtype: __iter__


   .. py:method:: __len__() -> int

      *__len__()* función nativa de Python intervenida por la estructura de datosv para recuperar el tamaño del ArrayList.

      :returns: tamaño del ArrayList.
      :rtype: int



.. py:class:: SingleLinked


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **SingleLinked** representa una estructura de datos dinámica de tipo lista sensillamente encadenada (Single Linked List), Implementada con Generic[T] y @dataclass para que sea una estructura de datos genérica.

   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo SingleLinked o Lista Sensillamente Encadenada.
   :rtype: SingleLinked

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del ArrayList, por defecto es None y el *__post_init__()* configura la función por defecto *lt_default_cmp_funcion()*.

   .. py:attribute:: first
      :type: Optional[DISClib.DataStructures.listnode.SingleNode[DISClib.Utils.default.T]]

      Representa el la referencia en memoria al primer nodo del SingleLinked.

   .. py:attribute:: last
      :type: Optional[DISClib.DataStructures.listnode.SingleNode[DISClib.Utils.default.T]]

      Representa la referencia en memoria al último nodo del SingleLinked.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del ArrayList, Por defecto es None y el *__post_init__()* configura la llave por defecto la llave 'id' en *DEFAULT_DICT_KEY*.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos que contiene la estructura, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto para la llave ('key') y la función de comparación ('cmp_function'). Si el usuario incluye una lista nativa de python como argumento, se agrega a la lista de elementos del SingleLinked.



   .. py:method:: default_cmp_function(elm1, elm2) -> int

      *default_cmp_function()* procesa con algoritmica por defecto la lista de elementos que procesa el SingleLinked. Es una función crucial para que la estructura de datos funcione correctamente.

      :param elm1: primer elemento a comparar.
      :type elm1: Any
      :param elm2: segundo elemento a comparar.
      :type elm2: Any

      :returns: respuesta de la comparación entre los elementos, 0 si son iguales, 1 si elm1 es mayor que elm2, -1 si elm1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el SingleLinked.

      Si se presenta un error en el SingleLinked, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun se considere conveniente.

      :param err: Excepción que se generó en el SingleLinked.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato del elemento que se quiere agregar al SingleLinked sea del mismo tipo contenido dentro de los elementos del SingleLinked.

      :raises TypeError: error si el tipo de dato del elemento que se quiere
      :raises agregar no es el mismo que el tipo de dato de los elementos que ya contiene el SingleLinked.:

      :param element: elemento que se quiere procesar en SingleLinked.
      :type element: T

      :returns: operador que indica si el ADT SingleLinked es del mismo tipo que el elemento que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el SingleLinked está vacía.

      :returns: operador que indica si la estructura SingleLinked está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el número de elementos que actualmente contiene el SingleLinked.

      :returns: tamaño de la estructura SingleLinked.
      :rtype: int


   .. py:method:: add_first(element: DISClib.Utils.default.T) -> None

      *add_first()* adiciona un elemento al inicio del SingleLinked.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_last(element: DISClib.Utils.default.T) -> None

      *add_last()* adiciona un elemento al final del SingleLinked.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_element(element: DISClib.Utils.default.T, pos: int) -> None

      *add_element()* adiciona un elemento en una posición dada del SingleLinked.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T
      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises IndexError: error si la posición es inválida.
      :raises IndexError: error si la estructura está vacía.


   .. py:method:: get_first() -> Optional[DISClib.Utils.default.T]

      *get_first()* lee el primer elemento del SingleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento del SingleLinked.
      :rtype: Optional[T]


   .. py:method:: get_last() -> Optional[DISClib.Utils.default.T]

      *get_last()* lee el último elemento del SingleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento del SingleLinked.
      :rtype: Optional[T]


   .. py:method:: get_element(pos: int) -> Optional[DISClib.Utils.default.T]

      *get_element()* lee un elemento en una posición dada del SingleLinked.

      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición es inválida.

      :returns: el elemento en la posición dada del SingleLinked.
      :rtype: Optional[T]


   .. py:method:: remove_first() -> Optional[DISClib.Utils.default.T]

      *remove_first()* elimina el primer elemento del SingleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento eliminado del SingleLinked.
      :rtype: Optional[T]


   .. py:method:: remove_last() -> Optional[DISClib.Utils.default.T]

      *remove_last()* elimina el último elemento del SingleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento eliminado del SingleLinked.
      :rtype: Optional[T]


   .. py:method:: remove_element(pos: int) -> Optional[DISClib.Utils.default.T]

      *remove_element()* elimina un elemento en una posición dada del SingleLinked.

      :param pos: índice del que se quiere eliminar el elemento.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.

      :returns: el elemento eliminado del SingleLinked.
      :rtype: Optional[T]


   .. py:method:: compare_elements(elem1: DISClib.Utils.default.T, elem2: DISClib.Utils.default.T) -> int

      *compare_elements()* compara dos elementos dentro del SingleLinked según la función de comparación definida por el usuario o la función por defecto.

      :param elem1: Primer elemento a comparar.
      :type elem1: T
      :param elem2: Segundo elemento a comparar.
      :type elem2: T

      :raises TypeError: error si la función de comparación no está definida.

      :returns: -1 si elem1 es menor que elem2, 0 si son iguales, 1 si elem1 es mayor que elem2.
      :rtype: int


   .. py:method:: find(element: DISClib.Utils.default.T) -> int

      *find()* revisa si un elemento está en el SingleLinked.

      :param element: elemento que se quiere revisar en el SingleLinked.
      :type element: T

      :returns: la posición del elemento en el SingleLinked, -1 si no está.
      :rtype: int


   .. py:method:: change_info(new_info: DISClib.Utils.default.T, pos: int) -> None

      *change_info()* cambia la información de un elemento en una posición dada.

      :param new_info: nueva información que se quiere agregar en el elemento.
      :type new_info: T
      :param pos: posición del elemento que se quiere cambiar.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.


   .. py:method:: exchange(pos1: int, pos2: int) -> None

      *exchange()* intercambia la información de dos elementos en dos posiciones dadas.

      :param pos1: posición del primer elemento.
      :type pos1: int
      :param pos2: posición del segundo elemento.
      :type pos2: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición del primer elemento es inválida.
      :raises Exception: error si la posición del segundo elemento es inválida.


   .. py:method:: sublist(start: int, end: int) -> SingleLinked[T]

      *sublist()* crea una sublista de la estructura según unas posiciones dentro del SingleLinked original.

      :param start: índice inicial de la sublista.
      :type start: int
      :param end: índice final de la sublista.
      :type end: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición inicial o final son inválidas.

      :returns: una sublista de la estructura original con la función de comparación y la llave de la estructura original.
      :rtype: SingleLinked[T]


   .. py:method:: concat(other: SingleLinked[T]) -> SingleLinked[T]

      *concat()* concatena dos estructuras de datos SingleLinked para crear una nueva estructura con los nodos de las dos estructuras.

      :param other: estructura de datos SingleLinked que se quiere concatenar con la estructura original.
      :type other: SingleLinked[T]

      :raises TypeError: error si la estructura que se quiere concatenar no es un SingleLinked.
      :raises TypeError: error si la llave de la estructura que se quiere unir no es la misma que la llave de la estructura original.
      :raises TypeError: error si la función de comparación de la estructura que se quiere unir no es la misma que la función de comparación de la estructura original.

      :returns: Estructura de datos SingleLinked original que contiene los elementos de las dos estructuras originales.
      :rtype: SingleLinked[T]


   .. py:method:: __iter__()

      *__iter__()* iterador nativo de Python intervenida por la estructura de datos para recorrer los elementos del SingleLinked utilizando un ciclo 'for' de python.

      :returns: iterador sobre los elementos del SingleLinked.
      :rtype: __iter__


   .. py:method:: __len__() -> int

      *__len__()* función nativa de Python intervenida por la estructura de datosv para recuperar el tamaño del SingleLinked.

      :returns: tamaño del SingleLinked.
      :rtype: int



.. py:class:: DoubleLinked


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **DoubleLinked** representa una estructura de datos de tipo DoubleLinked con la anotación '@dataclass' de python y el decorador 'Generic[T]' para indicar que es una estructura de datos genérica.

   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo DoubleLinked o Lista Doblemente Encadenada.
   :rtype: DoubleLinked

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del ArrayList, por defecto es 'None' y el *__post_init__()* configura la función por defecto *lt_default_cmp_funcion()*.

   .. py:attribute:: _header
      :type: Optional[DISClib.DataStructures.listnode.DoubleNode[DISClib.Utils.default.T]]

      Representa el nodo sentinela de la cabecera de la estructura, por defecto es un DoubleNode vacío.

   .. py:attribute:: _trailer
      :type: Optional[DISClib.DataStructures.listnode.DoubleNode[DISClib.Utils.default.T]]

      Representa el nodo sentinela del final de la estructura, por defecto es un DoubleNode vacío.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del ArrayList, Por defecto es 'None' y el *__post_init__()* configura la llave por defecto la llave 'id' en *DEFAULT_DICT_KEY*.

   .. py:attribute:: _size
      :type: int

      Es el número de elementos que contiene la estructura, por defecto es 0, por defecto es -1 para ajustar por los nodos sentinelas de la estructura.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto para la llave ('key') y la función de comparación ('cmp_function'). Si el usuario incluye una lista nativa de python como argumento, se agrega a la lista de elementos del DoubleLinked.



   .. py:method:: default_cmp_function(elm1, elm2) -> int

      *default_cmp_function()* procesa con algoritmica por defecto la lista de elementos que procesa el DoubleLinked. Es una función crucial para que la estructura de datos funcione correctamente.

      :param elm1: primer elemento a comparar.
      :type elm1: Any
      :param elm2: segundo elemento a comparar.
      :type elm2: Any

      :returns: respuesta de la comparación entre los elementos, 0 si son iguales, 1 si elm1 es mayor que elm2, -1 si elm1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el DoubleLinked.

      Si se presenta un error en el DoubleLinked, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun se considere conveniente.

      :param err: Excepción que se generó en el DoubleLinked.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato del elemento que se quiere agregar al DoubleLinked sea del mismo tipo contenido dentro de los elementos del DoubleLinked.

      :raises TypeError: error si el tipo de dato del elemento que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el DoubleLinked.

      :param element: elemento que se quiere procesar en DoubleLinked.
      :type element: T

      :returns: operador que indica si el ADT DoubleLinked es del mismo tipo que el elemento que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el DoubleLinked está vacía.

      :returns: operador que indica si la estructura DoubleLinked está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el número de elementos que actualmente contiene el DoubleLinked.

      :returns: tamaño de la estructura DoubleLinked.
      :rtype: int


   .. py:method:: add_first(element: DISClib.Utils.default.T) -> None

      *add_first()* adiciona un elemento al inicio del DoubleLinked.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_last(element: DISClib.Utils.default.T) -> None

      *add_last()* adiciona un elemento al final del DoubleLinked.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_element(element: DISClib.Utils.default.T, pos: int) -> None

      *add_element()* adiciona un elemento en una posición dada del DoubleLinked.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T
      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises IndexError: error si la posición es inválida.
      :raises IndexError: error si la estructura está vacía.


   .. py:method:: get_first() -> Optional[DISClib.Utils.default.T]

      *get_first()* lee el primer elemento del DoubleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento del DoubleLinked.
      :rtype: Optional[T]


   .. py:method:: get_last() -> Optional[DISClib.Utils.default.T]

      *get_last()* lee el último elemento del DoubleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento del DoubleLinked.
      :rtype: Optional[T]


   .. py:method:: get_element(pos: int) -> Optional[DISClib.Utils.default.T]

      *get_element()* lee un elemento en una posición dada del DoubleLinked.

      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición es inválida.

      :returns: el elemento en la posición dada del DoubleLinked.
      :rtype: Optional[T]


   .. py:method:: remove_first() -> Optional[DISClib.Utils.default.T]

      *remove_first()* elimina el primer elemento del DoubleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento eliminado del DoubleLinked.
      :rtype: Optional[T]


   .. py:method:: remove_last() -> Optional[DISClib.Utils.default.T]

      *remove_last()* elimina el último elemento del DoubleLinked.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento eliminado del DoubleLinked.
      :rtype: Optional[T]


   .. py:method:: remove_element(pos: int) -> Optional[DISClib.Utils.default.T]

      *remove_element()* elimina un elemento en una posición dada del DoubleLinked.

      :param pos: índice del que se quiere eliminar el elemento.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.

      :returns: el elemento eliminado del DoubleLinked.
      :rtype: Optional[T]


   .. py:method:: compare_elements(elem1: DISClib.Utils.default.T, elem2: DISClib.Utils.default.T) -> int

      *compare_elements()* compara dos elementos dentro del DoubleLinked según la función de comparación definida por el usuario o la función por defecto.

      :param elem1: Primer elemento a comparar.
      :type elem1: T
      :param elem2: Segundo elemento a comparar.
      :type elem2: T

      :raises TypeError: error si la función de comparación no está definida.

      :returns: -1 si elem1 es menor que elem2, 0 si son iguales, 1 si elem1 es mayor que elem2.
      :rtype: int


   .. py:method:: find(element: DISClib.Utils.default.T) -> int

      *find()* revisa si un elemento está en el DoubleLinked.

      :param element: elemento que se quiere revisar en el DoubleLinked.
      :type element: T

      :returns: la posición del elemento en el DoubleLinked, -1 si no está.
      :rtype: int


   .. py:method:: change_info(new_info: DISClib.Utils.default.T, pos: int) -> None

      *change_info()* cambia la información de un elemento en una posición dada.

      :param new_info: nueva información que se quiere agregar en el elemento.
      :type new_info: T
      :param pos: posición del elemento que se quiere cambiar.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.


   .. py:method:: exchange(pos1: int, pos2: int) -> None

      *exchange()* intercambia la información de dos elementos en dos posiciones dadas.

      :param pos1: posición del primer elemento.
      :type pos1: int
      :param pos2: posición del segundo elemento.
      :type pos2: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición del primer elemento es inválida.
      :raises Exception: error si la posición del segundo elemento es inválida.


   .. py:method:: sublist(start: int, end: int) -> DoubleLinked[T]

      *sublist()* crea una sublista de la estructura según unas posiciones dentro del DoubleLinked original.

      :param start: índice inicial de la sublista.
      :type start: int
      :param end: índice final de la sublista.
      :type end: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición inicial o final son inválidas.

      :returns: una sublista de la estructura original con la función de comparación y la llave de la estructura original.
      :rtype: DoubleLinked[T]


   .. py:method:: concat(other: DoubleLinked[T]) -> DoubleLinked[T]

      *concat()* concatena dos estructuras de datos DoubleLinked para crear una nueva estructura con los nodos de las dos estructuras.

      :param other: estructura de datos DoubleLinked que se
      :type other: DoubleLinked[T]
      :param quiere concatenar con la estructura original.:

      :raises TypeError: error si la estructura que se quiere concatenar no es un DoubleLinked.
      :raises TypeError: error si la llave de la estructura que se quiere unir no es la misma que la llave de la estructura original.
      :raises TypeError: error si la función de comparación de la estructura que se quiere unir no es la misma que la función de comparación de lA estructura original.

      :returns: Estructura de datos DoubleLinked original que contiene los elementos de las dos estructuras originales.
      :rtype: DoubleLinked[T]


   .. py:method:: __iter__()

      *__iter__* iterador que interviene la función nativa __iter__ para recorrer ascendentemente un DoubleLinked dentro de un ciclo 'for' de python.

      :Campos: *iterator* -- iterador sobre los elementos del DoubleLinked.


   .. py:method:: __reversed__()

      *__reversed__* iterador que interviene la función nativa __reversed__ para recorrer descendentemente un DoubleLinked dentro de un ciclo 'for' de python.

      :Campos: *iterator* -- iterador sobre los elementos del DoubleLinked.


   .. py:method:: __len__() -> int

      *__len__()* función nativa intervenida que devuelve el tamaño del DoubleLinked.

      :returns: tamaño del DoubleLinked.
      :rtype: int



.. py:class:: MapEntry


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **MapEntry** representa un registro de un mapa no ordenado. Contiene la llave y el valor del registro del mapa. Donde la llave es única para cada valor y el valor puede ser cualquier tipo de dato.

   :param Generic: Tipo de dato genérico dentro del registro del mapa.
   :type Generic: T

   :raises TypeError: error si la información del registro del mapa (llave o valor) no son del tipo adecuado.

   :returns: ADT de tipo MapEntry o registro de un mapa.
   :rtype: MapEntry

   .. py:attribute:: _key
      :type: Optional[DISClib.Utils.default.T]

      Es la llave del registro del mapa.

   .. py:attribute:: _value
      :type: Optional[DISClib.Utils.default.T]

      Es el valor del registro del mapa.

   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada para manejar los errores que se presentan en la clase MapEntry.

      Si se presenta un error en el MapEntry, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun se considere conveniente.

      :param err: Excepción que se generó en el MapEntry.
      :type err: Exception


   .. py:method:: _check_key_type(key: DISClib.Utils.default.T) -> bool

      *_check_key_type()* función privada que verifica que la información de la llave (key) del registro del mapa sea del tipo especificado.

      :param key: llave que se quiere verificar en el registro del mapa.
      :type key: T

      :raises TypeError: error si la información del registro del mapa no es del tipo adecuado.

      :returns: operador que indica si el tipo de dato de la llave es el mismo que el tipo de dato de la llave que ya contiene la estructura de datos.
      :rtype: bool


   .. py:method:: _check_value_type(value: DISClib.Utils.default.T) -> bool

      *_check_value_type()* función privada que verifica que la información del valor (value) en el registro del mapa sea del tipo especificado.

      :param value: valor que se quiere verificar en el registro del mapa.
      :type value: T

      :raises TypeError: error si la información del registro del mapa no es del tipo adecuado.

      :returns: operador que indica si el tipo de dato del valor es el mismo que el tipo de dato de los elementos que ya contiene la estructura de datos.
      :rtype: bool


   .. py:method:: set_key(key: DISClib.Utils.default.T) -> None

      *set_key()* introduce una nueva llave 'key' al registro del mapa.

      :param key: la nueva llave del registro del mapa.
      :type key: T


   .. py:method:: set_value(value: DISClib.Utils.default.T) -> None

      *set_value()* introduce un nuevo valor 'value' al registro del mapa.

      :param value: el nuevo valor del registro del mapa.
      :type value: T


   .. py:method:: get_key() -> DISClib.Utils.default.T

      *get_key()* recupera la llave 'key' contenida en el registro del mapa.

      :returns: la llave del registro del mapa.
      :rtype: T


   .. py:method:: get_value() -> DISClib.Utils.default.T

      *get_value()* recupera el valor 'value' contenido en el registro del mapa.

      :returns: el valor del registro del mapa.
      :rtype: T



.. py:class:: SeparateChaining


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **SeparateChaining** Es una clase que representa una tabla de hash con el método de encadenamiento por de separación (Separate Chaining). Donde la llave es única para cada valor y el valor puede ser cualquier tipo de dato.

   :param Generic: Tipo de dato genérico dentro del registro del mapa.
   :type Generic: T

   :raises TypeError: error si la información del registro del mapa (llave o valor) no son del tipo adecuado.

   :returns: ADT de tipo SeparateChaining o tabla de hash con separación por encadenamiento.
   :rtype: SeparateChaining

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: rehashable
      :type: bool
      :value: True

      Es un booleano que indica si la tabla de hash se puede reconstruir utilizando el método de rehash, por defecto es True.

   .. py:attribute:: nentries
      :type: int
      :value: 1

      Es el espacio inicial reservado para la tabla de hash (n), por defecto es 1, pero debe configurarse según el número de entradas que se espera almacenar.

   .. py:attribute:: mcapacity
      :type: int
      :value: 1

      Es la capacidad (M) con la que se inicializa la tabla de hash.

   .. py:attribute:: alpha
      :type: Optional[float]

      Es el factor de carga (alpha) con el que se inicializa la tabla de hash, por defecto es 4.0.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del SeparateChaining, por defecto es *None* y el *__post_init__()* configura la función por defecto *ht_default_cmp_funcion()*.

   .. py:attribute:: hash_table
      :type: DISClib.DataStructures.arraylist.ArrayList[Bucket[DISClib.Utils.default.T]]

      Es el indice de la tabla de hash donde se almacenan los *Buckets*, implementado con un *ArrayList* de DISCLib. en el *__post_init__()* se inicializa con la capacidad inicial de la tabla de hash.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del SeparateChaining, Por defecto la llave es la cadena de caracteres *"id"* definida en *DEFAULT_DICT_KEY*.

   .. py:attribute:: prime
      :type: Optional[int]

      Es el número primo (P) utilizado para calcular el código hash de la llave con la función de compresión MAD, por defecto es 109345121 definido en *DEFAULT_PRIME*.

   .. py:attribute:: _scale
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _shift
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _cur_alpha
      :type: Optional[float]
      :value: 0.0

      Es el factor de carga actual de la tabla de hash.

   .. py:attribute:: min_alpha
      :type: Optional[float]

      Es el factor de carga mínimo de la tabla de hash, por defecto es 2.0.

   .. py:attribute:: max_alpha
      :type: Optional[float]

      Es el factor de carga máximo de la tabla de hash, por defecto es 8.0.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos (n) dentro de la tabla de hash, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:attribute:: _collisions
      :type: Optional[int]
      :value: 0

      Es el número de colisiones en la tabla de hash.

   .. py:attribute:: _key_type
      :type: Optional[type]

      Es el tipo de dato de las llaves en la entrada que contiene la tabla de hash, por defecto es *None* y se configura al cargar el primera entrada en el mapa.

   .. py:attribute:: _value_type
      :type: Optional[type]

      Es el tipo de dato de los valores en la entrada que contiene la tabla de hash, por defecto es *None* y se configura al cargar el primera entrada en el mapa.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto de la estructura SeparateChaining después de la inicialización de la misma. Configura los factores de carga (alpha), el número primo (P) para la función de compresión MAD, la capacidad (M) de la tabla de hash, la función de comparación y la llave para comparar los elementos del SeparateChaining, y finalmente inicializa la tabla de hash con la capacidad (M) configurada.



   .. py:method:: default_cmp_function(key1, entry2: DISClib.DataStructures.mapentry.MapEntry) -> int

      *default_cmp_function()* procesa la llave existente en la entrada del SeparateChaining y la compara con la llave del a entrada que se quiere agregar al SeparateChaining.
      :param key1: llave de la primera entrada a comparar.
      :type key1: Any
      :param entry2: segunda entrada (pareja llave-valor) a comparar.
      :type entry2: MapEntry

      :returns: respuesta de la comparación entre los elementos, 0 si las llaves son iguales, 1 si key1 es mayor que la llave de entry2, -1 si key1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el SeparateChaining.

      Si se presenta un error en el SeparateChaining, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun sea considere conveniente.

      :param err: Excepción que se generó en el SeparateChaining.
      :type err: Exception


   .. py:method:: _check_type(entry: DISClib.DataStructures.mapentry.MapEntry) -> bool

      *_check_type()* función privada que verifica que el tipo de dato de la entrada que se quiere agregar al SeparateChaining sea del mismo tipo contenido dentro de los elementos del SeparateChaining.

      :raises TypeError: error si el tipo de dato de la entrada que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el SeparateChaining.

      :param entry: entrada (pareja llave-valor) que se quiere procesar en SeparateChaining.
      :type entry: T

      :returns: operador que indica si el ADT SeparateChaining es del mismo tipo que el entrada que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el SeparateChaining está vacío.

      :returns: operador que indica si la estructura SeparateChaining está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el numero de elementos que actualmente contiene el SeparateChaining.

      :returns: tamaño de la estructura SeparateChaining.
      :rtype: int


   .. py:method:: contains(key: DISClib.Utils.default.T) -> bool

      *contains()* responde si el SeparateChaining contiene una entrada con la llave key.

      :param key: llave de la entrada (pareja llave-valor) que se quiere buscar en el SeparateChaining.
      :type key: T

      :returns: operador que indica si el SeparateChaining contiene o no una entrada con la llave key.
      :rtype: bool


   .. py:method:: put(key: DISClib.Utils.default.T, value: DISClib.Utils.default.T) -> None

      *put()* agrega una entrada (pareja llave-valor) al SeparateChaining, si la llave ya existe en el SeparateChaining, se reemplaza el valor.

      :param key: llave asociada a la nueva entrada.
      :type key: T
      :param value: el valor asociado a la nueva entrada.
      :type value: T

      :raises Exception: si el indice de la entrada en el mapa está fuera de los limites establecidos, se genera un error.


   .. py:method:: get(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *get()* devuelve la entrada (pareja llave-valor) cuya llave sea igual a key dentro del SeparateChaining, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada a la entrada que se quiere buscar.
      :type key: T

      :raises Exception: error si la estructura está vacía.

      :returns: entrada (pareja llave-valor) con la llave igual a key dentro del SeparateChaining, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: check_bucket(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *check_bucket()* devuelve el bucket asociado a la llave key dentro del SeparateChaining, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada al bucket que se quiere buscar.
      :type key: T

      :raises Exception: error si la estructura está vacía.

      :returns: bucket asociado a la llave key dentro del SeparateChaining, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: remove(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *remove()* elimina la entrada (pareja llave-valor) cuya llave sea igual a key dentro del SeparateChaining, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada a la entrada que se quiere eliminar.
      :type key: T

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la entrada que se quiere eliminar no existe dentro del bucket

      :returns: entrada (pareja llave-valor) que se eliminó del SeparateChaining, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: keys() -> DISClib.DataStructures.singlelinkedlist.SingleLinked[DISClib.Utils.default.T]

      *keys()* devuelve una lista (SingleLinked) con todas las llaves de las entradas (parejas llave-valor) del SeparateChaining.

      :returns: lista (ArrSingleLinkedayList) con todas las llaves del SeparateChaining.
      :rtype: SingleLinked[T]


   .. py:method:: values() -> DISClib.DataStructures.singlelinkedlist.SingleLinked[DISClib.Utils.default.T]

      *values()* devuelve una lista (SingleLinked) con todos los valores de las entradas (parejas llave-valor) del SeparateChaining.

      :returns: lista (SingleLinked) con todos los valores del SeparateChaining.
      :rtype: SingleLinked[T]


   .. py:method:: entries() -> DISClib.DataStructures.singlelinkedlist.SingleLinked[DISClib.Utils.default.T]

      *entries()* devuelve una lista (SingleLinked) con todas las entradas (parejas llave-valor) del SeparateChaining.

      :returns: lista (SingleLinked) con todas las entradas del SeparateChaining.
      :rtype: SingleLinked[T]


   .. py:method:: rehash() -> None

      *rehash()* reconstruye la tabla de hash con una nueva capacidad (M) y un nuevo factor de carga (alpha) según los límites establecidos por el usuario en los atributos *max_alpha* y *min_alpha*.

      Si el factor de carga (alpha) es mayor que el límite superior (max_alpha), se duplica la capacidad (M) buscando el siguiente número primo y se reconstruye la tabla de hash.

      Si el factor de carga (alpha) es menor que el límite inferior (min_alpha), se reduce a la mitad la capacidad (M) de la tabla de hash buscando el siguiente número primo y se reconstruye la tabla de hash.



.. py:class:: LinearProbing


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **LinearProbing** Es una clase que representa una tabla de hash con el método de encadenamiento por de separación (Separate Chaining). Donde la llave es única para cada valor y el valor puede ser cualquier tipo de dato.

   :param Generic: Tipo de dato genérico dentro del registro del mapa.
   :type Generic: T

   :raises TypeError: error si la información del registro del mapa (llave o valor) no son del tipo adecuado.

   :returns: ADT de tipo LinearProbing o tabla de hash con separación por encadenamiento.
   :rtype: LinearProbing

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: rehashable
      :type: bool
      :value: True

      Es un booleano que indica si la tabla de hash se puede reconstruir utilizando el método de rehash, por defecto es True.

   .. py:attribute:: nentries
      :type: int
      :value: 1

      Es el espacio reservado para la tabla de hash (n), por defecto es 1, pero debe configurarse según el número de entradas que se espera almacenar.

   .. py:attribute:: mcapacity
      :type: int
      :value: 2

      Es la capacidad (M) con la que se inicializa la tabla de hash.

   .. py:attribute:: alpha
      :type: Optional[float]

      Es el factor de carga (alpha) con el que se inicializa la tabla de hash, por defecto es 4.0.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del LinearProbing, por defecto es *None* y el *__post_init__()* configura la función por defecto *ht_default_cmp_funcion()*.

   .. py:attribute:: hash_table
      :type: DISClib.DataStructures.arraylist.ArrayList[DISClib.DataStructures.mapentry.MapEntry[DISClib.Utils.default.T]]

      Es el indice de la tabla de hash donde se almacenan los *MapEntry*, implementado con un *ArrayList* de DISCLib. en el *__post_init__()* se inicializa con la capacidad inicial de la tabla de hash.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del SeparateChaining, Por defecto la llave es la cadena de caracteres *"id"* definida en *DEFAULT_DICT_KEY*.

   .. py:attribute:: prime
      :type: Optional[int]

      Es el número primo (P) utilizado para calcular el código hash de la llave con la función de compresión MAD, por defecto es 109345121 definido en *DEFAULT_PRIME*.

   .. py:attribute:: _scale
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _shift
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _cur_alpha
      :type: Optional[float]
      :value: 0

      Es el factor de carga actual de la tabla de hash.

   .. py:attribute:: max_alpha
      :type: Optional[float]

      Es el factor de carga máximo de la tabla de hash, por defecto es 8.0.

   .. py:attribute:: min_alpha
      :type: Optional[float]

      Es el factor de carga mínimo de la tabla de hash, por defecto es 2.0.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos (n) dentro de la tabla de hash, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:attribute:: _collisions
      :type: Optional[int]
      :value: 0

      Es el número de colisiones en la tabla de hash.

   .. py:attribute:: _key_type
      :type: Optional[type]

      Es el tipo de dato de las llaves en la entrada que contiene la tabla de hash, por defecto es *None* y se configura al cargar el primera entrada en el mapa.

   .. py:attribute:: _value_type
      :type: Optional[type]

      Es el tipo de dato de los valores en la entrada que contiene la tabla de hash, por defecto es *None* y se configura al cargar el primera entrada en el mapa.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto de la estructura LinearProbing después de la inicialización de la misma. Configura los factores de carga (alpha), el número primo (P) para la función de compresión MAD, la capacidad (M) de la tabla de hash, la función de comparación y la llave para comparar los elementos del LinearProbing, y finalmente inicializa la tabla de hash con la capacidad (M) configurada.



   .. py:method:: default_cmp_function(key1, entry2: DISClib.DataStructures.mapentry.MapEntry) -> int

      *default_cmp_function()* procesa la llave existente en la entrada del LinearProbing y la compara con la llave del a entrada que se quiere agregar al LinearProbing.
      :param key1: llave de la primera entrada a comparar.
      :type key1: Any
      :param entry2: segunda entrada (pareja llave-valor) a comparar.
      :type entry2: MapEntry

      :returns: respuesta de la comparación entre los elementos, 0 si las llaves son iguales, 1 si key1 es mayor que la llave de entry2, -1 si key1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el LinearProbing.

      Si se presenta un error en el LinearProbing, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun sea considere conveniente.

      :param err: Excepción que se generó en el LinearProbing.
      :type err: Exception


   .. py:method:: _check_type(entry: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato de la entrada que se quiere agregar al LinearProbing sea del mismo tipo contenido dentro de los elementos del LinearProbing.

      :raises TypeError: error si el tipo de dato de la entrada que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el LinearProbing.

      :param entry: entrada que se quiere procesar en LinearProbing.
      :type entry: T

      :returns: operador que indica si el ADT LinearProbing es del mismo tipo que la entrada que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el LinearProbing está vacío.

      :returns: operador que indica si la estructura LinearProbing está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el numero de elementos que actualmente contiene el LinearProbing.

      :returns: tamaño de la estructura LinearProbing.
      :rtype: int


   .. py:method:: contains(key: DISClib.Utils.default.T) -> bool

      *contains()* responde si el LinearProbing contiene una entrada con la llave key.

      :param key: llave de la entrada (pareja llave-valor) que se quiere buscar en el LinearProbing.
      :type key: T

      :returns: operador que indica si el LinearProbing contiene o no una entrada con la llave key.
      :rtype: bool


   .. py:method:: put(key: DISClib.Utils.default.T, value: DISClib.Utils.default.T) -> None

      *put()* agrega una entrada (pareja llave-valor) al LinearProbing, si la llave ya existe en el LinearProbing, se reemplaza el valor.

      :param key: llave asociada a la nueva entrada.
      :type key: T
      :param value: el valor asociado a la nueva entrada.
      :type value: T

      :raises Exception: si el indice de la entrada en el mapa está fuera de los limites establecidos, se genera un error.


   .. py:method:: get(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *get()* devuelve la entrada (pareja llave-valor) cuya llave sea igual a key dentro del LinearProbing, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada a la entrada que se quiere buscar.
      :type key: T

      :raises Exception: error si la estructura está vacía.

      :returns: entrada (pareja llave-valor) con la llave igual a key dentro del LinearProbing, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: check_bucket(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *check_bucket()* devuelve el bucket asociado a la llave key dentro del LinearProbing, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada al bucket que se quiere buscar.
      :type key: T

      :raises Exception: error si la estructura está vacía.

      :returns: bucket asociado a la llave key dentro del LinearProbing, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: remove(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]

      *remove()* elimina la entrada (pareja llave-valor) cuya llave sea igual a key dentro del LinearProbing, si no existe una entrada con la llave key, devuelve None.

      :param key: llave asociada a la entrada que se quiere eliminar.
      :type key: T

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la entrada que se quiere eliminar no existe dentro del bucket

      :returns: entrada (pareja llave-valor) que se eliminó del LinearProbing, None si no existe la entrada asociada a la llave key.
      :rtype: Optional[T]


   .. py:method:: keys() -> DISClib.DataStructures.singlelinkedlist.SingleLinked[DISClib.Utils.default.T]

      *keys()* devuelve una lista (SingleLinked) con todas las llaves de las entradas (parejas llave-valor) del LinearProbing.

      :returns: lista (SingleLinked) con todas las llaves del LinearProbing.
      :rtype: SingleLinked[T]


   .. py:method:: values() -> DISClib.DataStructures.singlelinkedlist.SingleLinked[DISClib.Utils.default.T]

      *values()* devuelve una lista (SingleLinked) con todos los valores de las entradas (parejas llave-valor) del LinearProbing.

      :returns: lista (SingleLinked) con todos los valores del LinearProbing.
      :rtype: SingleLinked[T]


   .. py:method:: entries() -> DISClib.DataStructures.singlelinkedlist.SingleLinked[DISClib.Utils.default.T]

      *entries()* devuelve una lista (SingleLinked) con todas las entradas (parejas llave-valor) del LinearProbing.

      :returns: lista (SingleLinked) con todas las entradas del LinearProbing.
      :rtype: SingleLinked[T]


   .. py:method:: _find_slot(hkey: int, key: DISClib.Utils.default.T) -> int

      *_find_slot()* encuentra el indice de la entrada (pareja llave-valor) en el LinearProbing, si la entrada no existe, devuelve el indice de la primera entrada disponible.

      :param hkey: indice de la entrada (pareja llave-valor) en el LinearProbing.
      :type hkey: int
      :param key: llave de la entrada (pareja llave-valor) que se quiere buscar.
      :type key: T

      :returns: indice de la entrada (pareja llave-valor) en el LinearProbing, si la entrada no existe, devuelve el indice de la primera entrada disponible. -1 si no existe la entrada y no hay entradas disponibles.
      :rtype: int


   .. py:method:: _is_available(entry: DISClib.DataStructures.mapentry.MapEntry) -> bool

      *_is_available()* permite verificar si una entrada (pareja llave-valor) está disponible en el LinearProbing. Es decir si la llave es nula (None) o vacía (EMPTY).

      :param entry: entrada (pareja llave-valor) que se quiere verificar.
      :type entry: MapEntry

      :returns: operador que indica si la entrada está disponible o no en el LinearProbing.
      :rtype: bool


   .. py:method:: rehash() -> None

      *rehash()* reconstruye la tabla de hash con una nueva capacidad (M) y un nuevo factor de carga (alpha) según los límites establecidos por el usuario en los atributos *max_alpha* y *min_alpha*.

      Si el factor de carga (alpha) es mayor que el límite superior (max_alpha), se duplica la capacidad (M) buscando el siguiente número primo y se reconstruye la tabla de hash.

      Si el factor de carga (alpha) es menor que el límite inferior (min_alpha), se reduce a la mitad la capacidad (M) de la tabla de hash buscando el siguiente número primo y se reconstruye la tabla de hash.



.. py:data:: file_path

   

.. py:data:: file_dir

   

