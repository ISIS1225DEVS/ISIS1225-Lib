:py:mod:`DISClib.Algorithms.Sorting.quicksort`
==============================================

.. py:module:: DISClib.Algorithms.Sorting.quicksort

.. autoapi-nested-parse::

   Este módulo contiene la implementación del algoritmo de ordenamiento rápido (quick sort) un algoritmo creado por Tony Hoare que utiliza el principio de dividir y conquistar para ordenar una secuencia de elementos. El algoritmo puede aplicarse a cualquier secuencia de elementos que puedan ser comparados entre sí como los ADT *List* y sus estructuras especificas *ArrayList*, *LinkedList*, *DoubleLinkedList*, *Queue* y *Stack*

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   DISClib.Algorithms.Sorting.quicksort.quick_sort
   DISClib.Algorithms.Sorting.quicksort._quick_sort
   DISClib.Algorithms.Sorting.quicksort._partition



Attributes
~~~~~~~~~~

.. autoapisummary::

   DISClib.Algorithms.Sorting.quicksort.List


.. py:data:: List

   Lista de tipos de estructuras que se pueden ordenar por el algoritmo de ordenamiento (ADT *List* y sus estructuras especificas *ArrayList*, *LinkedList*, *DoubleLinkedList*, *Queue* y *Stack*)

.. py:function:: quick_sort(lst: List, sort_crit: Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], bool]) -> List

   *quick_sort()* ordena una lista de elementos utilizando el algoritmo de ordenamiento rápido (quick sort).

   :param lst: La lista a ordenar. Puede ser *ArrayList*, *LinkedList*, *DoubleLinkedList*, *Queue* o *Stack*.
   :type lst: List
   :param sort_crit: Es una función definida por el usuario que representa el criterio de ordenamiento. Recibe dos elementos pertenecientes al ADT **List** y retorna *True* si el primer elemento es menor que el segundo elemento, y *False* en caso contrario.
   :type sort_crit: Callable[[T, T], bool]

   :returns: La lista ordenada.
   :rtype: List


.. py:function:: _quick_sort(lst: List, low: int, high: int, sort_crit: Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], bool])

   *_quick_sort()* ordena recursivamente una lista de elementos. Primero se selecciona el pivote utilizando la función de particion. Luego se ejecuta la recursión con los elementos a la izquierda del pivote y a la derecha del pivote.

   :param lst: La lista a ordenar. Puede ser *ArrayList*, *LinkedList*, *DoubleLinkedList*, *Queue* o *Stack*.
   :type lst: List
   :param low: límite inferior de la sublista a ordenar segun el indice del pivote.
   :type low: int
   :param high: límite superior de la sublista a ordenar segun el indice del pivote.
   :type high: int
   :param sort_crit: Es una función definida por el usuario que representa el criterio de ordenamiento. Recibe dos elementos pertenecientes al ADT **List** y retorna *True* si el primer elemento es menor que el segundo elemento, y *False* en caso contrario.
   :type sort_crit: Callable[[T, T], bool]


.. py:function:: _partition(lst: List, low: int, high: int, sort_crit: Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], bool]) -> int

   *_partition()* selecciona el pivote de la lista y lo deja en su lugar, mientras mueve los elementos menores a la izquierda del pivote y los elementos mayores a la derecha del pivote.

   :param lst: La lista a ordenar. Puede ser *ArrayList*, *LinkedList*, *DoubleLinkedList*, *Queue* o *Stack*.
   :type lst: List
   :param low: límite inferior de la sublista a ordenar segun el indice del pivote.
   :type low: int
   :param high: límite superior de la sublista a ordenar segun el indice del pivote.
   :type high: int
   :param sort_crit: Es una función definida por el usuario que representa el criterio de ordenamiento. Recibe dos elementos pertenecientes al ADT **List** y retorna *True* si el primer elemento es menor que el segundo elemento, y *False* en caso contrario.
   :type sort_crit: Callable[[T, T], bool]

   :returns: El nuevo indice del pivote.
   :rtype: int


