# SOME DESCRIPTIVE TITLE.
# Copyright (C) Uniandes, Bogotá - Colombia, Sur América,
# This file is distributed under the same license as the DISClib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DISClib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-03 00:09-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:2
msgid ":py:mod:`Src.DISClib.Algorithms.Sorting.heapsort`"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:8
msgid ""
"Este módulo contiene la implementación del algoritmo de ordenamiento por "
"montículos (heap sort) un algoritmo creado por J.W.J. Williams que "
"utiliza el principio de dividir y conquistar para ordenar una secuencia "
"de elementos. El algoritmo puede aplicarse a cualquier secuencia de "
"elementos que puedan ser comparados entre sí como los ADT *List* y sus "
"estructuras especificas *ArrayList*, *LinkedList*, *DoubleLinkedList*, "
"*Queue* y *Stack*"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:10
msgid ""
"*IMPORTANTE:* Este código y sus especificaciones para Python están "
"basados en las implementaciones propuestas por los siguientes "
"autores/libros:"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:12
msgid "Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:13
msgid ""
"Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H."
" Goldwasser."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:18
msgid "Module Contents"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:22
msgid "Functions"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:31:<autosummary>:1
msgid ""
":py:obj:`heap_sort <Src.DISClib.Algorithms.Sorting.heapsort.heap_sort>`\\"
" \\(→ Src.DISClib.DataStructures.List\\)"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:34
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:31:<autosummary>:1
msgid ""
"*heap_sort()* ordena una lista de elementos utilizando el algoritmo de "
"ordenamiento por montículos (heap sort)."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:31:<autosummary>:1
msgid ""
":py:obj:`_heapify <Src.DISClib.Algorithms.Sorting.heapsort._heapify>`\\ "
"\\(→ Src.DISClib.DataStructures.List\\)"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:47
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:31:<autosummary>:1
msgid ""
"*_heapify()* construye un montículo inicial del algoritmo de "
"ordenamiento. Utiliza el criterio de ordenamiento para ajustar la lista "
"al montículo y poder garantizar que los elementos tienen hijos izquierdos"
" y derechos según el índice de árbol binario lleno reconstruido en el "
"indice i*2+1 y i*2+2 respectivamente."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:31:<autosummary>:1
msgid ""
":py:obj:`_sift <Src.DISClib.Algorithms.Sorting.heapsort._sift>`\\ "
"\\(lst\\, low\\, high\\, sort\\_crit\\)"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:64
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:31:<autosummary>:1
msgid ""
"*_sift()* ajusta la lista al montículo según el criterio de ordenamiento."
" Utiliza el criterio de ordenamiento para encontrar el elemento de mayor "
"importancia en el montículo y ajusta la posición del elemento de acuerdo "
"con él."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst
msgid "Parámetros"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:36
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:49
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:66
msgid ""
"La lista a ordenar. Puede ser *ArrayList*, *LinkedList*, "
"*DoubleLinkedList*, *Queue* o *Stack*."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:38
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:55
#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:72
msgid ""
"Es una función definida por el usuario que representa el criterio de "
"ordenamiento. Recibe dos elementos pertenecientes al ADT **List** y "
"retorna *True* si el primer elemento es menor que el segundo elemento, y "
"*False* en caso contrario."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst
msgid "Devuelve"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:41
msgid "La lista ordenada."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst
msgid "Tipo del valor devuelto"
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:51
msgid ""
"límite inferior de la sublista a ordenar según el índice de árbol binario"
" lleno reconstruido."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:53
msgid ""
"límite superior de la sublista a ordenar según el índice de árbol binario"
" lleno reconstruido."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:58
msgid "lista ajustada al montículo según el criterio de ordenamiento."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:68
msgid ""
"límite inferior de la sublista a ordenar según el índice del árbol "
"binario lleno reconstruido."
msgstr ""

#: ../../autoapi/Src/DISClib/Algorithms/Sorting/heapsort/index.rst:70
msgid ""
"límite superior de la sublista a ordenar según el índice del árbol "
"binario lleno reconstruido."
msgstr ""

