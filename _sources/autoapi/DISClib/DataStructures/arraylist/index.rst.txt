:py:mod:`DISClib.DataStructures.arraylist`
==========================================

.. py:module:: DISClib.DataStructures.arraylist

.. autoapi-nested-parse::

   Este ADT representa una estructura de datos lineal, específicamente un arreglo dinámico (ArrayList). El arreglo dinámico es una estructura de datos que permite almacenar un conjunto de elementos del mismo tipo, en la cual se puede acceder y procesar sus elementos utilizando las funciones/métodos propios de la estructura.

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.arraylist.ArrayList




.. py:class:: ArrayList


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **ArrayList** representa la estructura de datos para arreglos dinamicos (Array List), Implementada con Generic[T] y @dataclass para que sea una estructura de datos genérica.

   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo ArrayList o Arreglo Dinámico.
   :rtype: ArrayList

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del ArrayList, por defecto es None y el *__post_init__()* configura la función por defecto *lt_default_cmp_funcion()*.

   .. py:attribute:: elements
      :type: List[DISClib.Utils.default.T]

      Lista nativa de Python que contiene los elementos de la estructura.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del ArrayList, Por defecto es 'None' y el *__post_init__()* configura la llave por defecto la llave 'id' en *DEFAULT_DICT_KEY*.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos que contiene la estructura, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los valores por defecto para la llave ('key') y la función de comparación ('cmp_function'). Si el usuario incluye una lista nativa de python como argumento, se agrega a la lista de elementos del ArrayList.



   .. py:method:: default_cmp_function(elm1, elm2) -> int

      *default_cmp_function()* procesa con algoritmica por defecto la lista de elementos que procesa el ArrayList. Es una función crucial para que la estructura de datos funcione correctamente.

      :param elm1: primer elemento a comparar.
      :type elm1: Any
      :param elm2: segundo elemento a comparar.
      :type elm2: Any

      :returns: respuesta de la comparación entre los elementos, 0 si son iguales, 1 si elm1 es mayor que elm2, -1 si elm1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el ArrayList.

      Si se presenta un error en ArrayList, se formatea el error según el contexto (paquete/clase), la función que lo generó y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun se considere conveniente.

      :param err: Excepción que se generó en el ArrayList.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato del elemento que se quiere agregar al ArrayList sea del mismo tipo contenido dentro de los elementos del ArrayList.

      :raises TypeError: error si el tipo de dato del elemento que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el ArrayList.

      :param element: elemento que se quiere procesar en ArrayList.
      :type element: T

      :returns: operador que indica si el ADT ArrayList es del mismo tipo que el elemento que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el ArrayList está vacía.

      :returns: operador que indica si la estructura ArrayList está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el número de elementos que actualmente contiene el ArrayList.

      :returns: tamaño de la estructura ArrayList.
      :rtype: int


   .. py:method:: add_first(element: DISClib.Utils.default.T) -> None

      *add_first()* adiciona un elemento al inicio del ArrayList.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_last(element: DISClib.Utils.default.T) -> None

      *add_last()* adiciona un elemento al final del ArrayList.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_element(element: DISClib.Utils.default.T, pos: int) -> None

      *add_element()* adiciona un elemento en una posición dada del ArrayList.

      :param element: elemento que se quiere agregar a la estructura.
      :type element: T
      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises IndexError: error si la posición es inválida.
      :raises IndexError: error si la estructura está vacía.


   .. py:method:: get_first() -> DISClib.Utils.default.T

      *get_first()* lee el primer elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento del ArrayList.
      :rtype: T


   .. py:method:: get_last() -> DISClib.Utils.default.T

      *get_last()* lee el último elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento del ArrayList.
      :rtype: T


   .. py:method:: get_element(pos: int) -> DISClib.Utils.default.T

      *get_element()* lee un elemento en una posición dada del ArrayList.

      :param pos: índice en la que se quiere agregar el elemento.
      :type pos: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición es inválida.

      :returns: el elemento en la posición dada del ArrayList.
      :rtype: T


   .. py:method:: remove_first() -> DISClib.Utils.default.T

      *remove_first()* elimina el primer elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento eliminado del ArrayList.
      :rtype: T


   .. py:method:: remove_last() -> DISClib.Utils.default.T

      *remove_last()* elimina el último elemento del ArrayList.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento eliminado del ArrayList.
      :rtype: T


   .. py:method:: remove_element(pos: int) -> DISClib.Utils.default.T

      *remove_element()* elimina un elemento en una posición dada del ArrayList.

      :param pos: índice del que se quiere eliminar el elemento.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.

      :returns: el elemento eliminado del ArrayList.
      :rtype: T


   .. py:method:: compare_elements(elem1: DISClib.Utils.default.T, elem2: DISClib.Utils.default.T) -> int

      *compare_elements()* compara dos elementos dentro del ArrayList según la función de comparación definida por el usuario o la función por defecto.

      :param elem1: Primer elemento a comparar.
      :type elem1: T
      :param elem2: Segundo elemento a comparar.
      :type elem2: T

      :raises TypeError: error si la función de comparación no está definida.

      :returns: -1 si elem1 es menor que elem2, 0 si son iguales, 1 si elem1 es mayor que elem2.
      :rtype: int


   .. py:method:: find(element: DISClib.Utils.default.T) -> int

      *find()* revisa si un elemento está en el ArrayList.

      :param element: elemento que se quiere revisar en el ArrayList.
      :type element: T

      :returns: la posición del elemento en el ArrayList, -1 si no está.
      :rtype: int


   .. py:method:: change_info(new_info: DISClib.Utils.default.T, pos: int) -> None

      *change_info()* cambia la información de un elemento en una posición dada.

      :param new_info: nueva información que se quiere agregar en el elemento.
      :type new_info: T
      :param pos: posición del elemento que se quiere cambiar.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.


   .. py:method:: exchange(pos1: int, pos2: int) -> None

      *exchange()* intercambia la información de dos elementos en dos posiciones dadas.

      :param pos1: posición del primer elemento.
      :type pos1: int
      :param pos2: posición del segundo elemento.
      :type pos2: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición del primer elemento es inválida.
      :raises Exception: error si la posición del segundo elemento es inválida.


   .. py:method:: sublist(start: int, end: int) -> ArrayList[T]

      *sublist()* crea una sublista de la estructura según unas posiciones dentro del ArrayList original.

      :param start: índice inicial de la sublista.
      :type start: int
      :param end: índice final de la sublista.
      :type end: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición inicial o final son inválidas.

      :returns: una sublista de la estructura original con la función de comparación y la llave de la estructura original.
      :rtype: ArrayList[T]


   .. py:method:: concat(other: ArrayList[T]) -> ArrayList[T]

      *concat()* concatena dos estructuras de datos ArrayList para crear una nueva estructura con los elementos de las dos estructuras.

      :param other: estructura de datos ArrayList que se quiere concatenar con la estructura original.
      :type other: ArrayList[T]

      :raises TypeError: error si la estructura que se quiere concatenar no es un ArrayList.
      :raises TypeError: error si la llave de la estructura que se quiere unir no es la misma que la llave de la estructura original.
      :raises TypeError: error si la función de comparación de la estructura que se quiere unir no es la misma que la función de comparación de la estructura original.

      :returns: Estructura de datos original ArrayList que contiene los elementos de las dos estructuras originales.
      :rtype: ArrayList[T]


   .. py:method:: __iter__()

      *__iter__()* iterador nativo de Python intervenida por la estructura de datos para recorrer los elementos del ArrayList utilizando un ciclo 'for' de python.

      :returns: iterador Python sobre los elementos del ArrayList.
      :rtype: __iter__


   .. py:method:: __len__() -> int

      *__len__()* función nativa de Python intervenida por la estructura de datosv para recuperar el tamaño del ArrayList.

      :returns: tamaño del ArrayList.
      :rtype: int



