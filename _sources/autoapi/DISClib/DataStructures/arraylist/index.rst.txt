:py:mod:`DISClib.DataStructures.arraylist`
==========================================

.. py:module:: DISClib.DataStructures.arraylist

.. autoapi-nested-parse::

   Este ADT representa una estructura de datos lineal, específicamente un arreglo dinámico (**ArrayList**). El arreglo dinámico es una estructura de datos que permite almacenar un conjunto de elementos del mismo tipo, en la cual se puede acceder y procesar sus elementos utilizando las funciones propias de la estructura.

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.arraylist.ArrayList




.. py:class:: ArrayList


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **ArrayList** representa la estructura de datos para arreglos dinamicos (*ArrayList*), Implementada con Generic[T] y @dataclass para que sea una estructura de datos genérica.

   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo *ArrayList* o Arreglo Dinámico.
   :rtype: ArrayList

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python personalizable por el usuario para inicializar la estructura. Por defecto es *None* y el usuario puede incluirla como argumento al crear la estructura.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación personalizable por el usuario para reconocer los elementos dentro del *ArrayList*. Por defecto es la función *lt_default_cmp_funcion()* propia de *DISClib*, puede ser un parametro al crear la estructura.

   .. py:attribute:: elements
      :type: List[DISClib.Utils.default.T]

      Lista nativa de Python que contiene los elementos de la estructura.

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave personalizable por el usuario utilizada para reconocer los elementos dentro del *ArrayList*. Por defecto es la llave de diccionario (*dict*) *DEFAULT_DICT_KEY = 'id'* propia de *DISClib*, puede ser un parametro al crear la estructura.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos que contiene la estructura, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:method:: __post_init__() -> None

      *__post_init__()* configura los parametros personalizados por el usuario al crear el *ArrayList*. En caso de no estar definidos, se asignan los valores por defecto, puede cargar listas nativas con el parametro *iodata* de python dentro de la estructura.



   .. py:method:: default_cmp_function(elm1, elm2) -> int

      *default_cmp_function()* es la función de comparación por defecto para comparar elementos dentro del *ArrayList*, es una función crucial para que la estructura funcione correctamente.

      :param elm1: primer elemento a comparar.
      :type elm1: Any
      :param elm2: segundo elemento a comparar.
      :type elm2: Any

      :returns: respuesta de la comparación entre los elementos, 0 si son iguales, 1 si elm1 es mayor que elm2, -1 si elm1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función propia de la estructura que maneja los errores que se pueden presentar en el *ArrayList*.

      Si se presenta un error en *ArrayList*, se formatea el error según el contexto (paquete/módulo/clase), la función (método) que lo generó y lo reenvia al componente superior en la jerarquía *DISCLib* para manejarlo segun se considere conveniente el usuario.

      :param err: Excepción que se generó en el *ArrayList*.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      _check_type _summary_

      :param element: _description_
      :type element: T

      :raises TypeError: _description_

      :returns: _description_
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el *ArrayList* está vacío.

      :returns: operador que indica si la estructura *ArrayList* está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el número de elementos que actualmente contiene el *ArrayList*.

      :returns: tamaño de la estructura *ArrayList*.
      :rtype: int


   .. py:method:: add_first(element: DISClib.Utils.default.T) -> None

      *add_first()* adiciona un elemento al inicio del *ArrayList*.

      :param element: elemento que se desea agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_last(element: DISClib.Utils.default.T) -> None

      *add_last()* adiciona un elemento al final del *ArrayList*.

      :param element: elemento que se desea agregar a la estructura.
      :type element: T

      :raises Exception: si la operación no se puede realizar, se invoca la función *_handle_error()* para manejar el error.


   .. py:method:: add_element(element: DISClib.Utils.default.T, pos: int) -> None

      *add_element()* adiciona un elemento en una posición especifica del *ArrayList*.

      :param element: elemento que se desea agregar a la estructura.
      :type element: T
      :param pos: posición en la que se desea agregar el elemento.
      :type pos: int

      :raises IndexError: error si la posición es inválida.
      :raises IndexError: error si la estructura está vacía.


   .. py:method:: get_first() -> DISClib.Utils.default.T

      *get_first()* lee el primer elemento del *ArrayList*.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento del *ArrayList*.
      :rtype: T


   .. py:method:: get_last() -> DISClib.Utils.default.T

      *get_last()* lee el último elemento del *ArrayList*.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento del *ArrayList*.
      :rtype: T


   .. py:method:: get_element(pos: int) -> DISClib.Utils.default.T

      *get_element()* lee un elemento en una posición especifica del *ArrayList*.

      :param pos: posición del elemento que se desea leer.
      :type pos: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición es inválida.

      :returns: el elemento en la posición especifica del *ArrayList*.
      :rtype: T


   .. py:method:: remove_first() -> DISClib.Utils.default.T

      *remove_first()* elimina el primer elemento del *ArrayList*.

      :raises Exception: error si la estructura está vacía.

      :returns: el primer elemento eliminado del *ArrayList*.
      :rtype: T


   .. py:method:: remove_last() -> DISClib.Utils.default.T

      *remove_last()* elimina el último elemento del *ArrayList*.

      :raises Exception: error si la estructura está vacía.

      :returns: el ultimo elemento eliminado del *ArrayList*.
      :rtype: T


   .. py:method:: remove_element(pos: int) -> DISClib.Utils.default.T

      *remove_element()* elimina un elemento en una posición especifica del *ArrayList*.

      :param pos: posición del elemento que se desea eliminar.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.

      :returns: el elemento eliminado del *ArrayList*.
      :rtype: T


   .. py:method:: compare_elements(elem1: DISClib.Utils.default.T, elem2: DISClib.Utils.default.T) -> int

      *compare_elements()* compara dos elementos dentro del *ArrayList* según la función de comparación de la estructura.

      :param elem1: Primer elemento a comparar.
      :type elem1: T
      :param elem2: Segundo elemento a comparar.
      :type elem2: T

      :raises TypeError: error si la función de comparación no está definida.

      :returns: -1 si elem1 es menor que elem2, 0 si son iguales, 1 si elem1 es mayor que elem2.
      :rtype: int


   .. py:method:: find(element: DISClib.Utils.default.T) -> int

      *find()* busca el elemento dentro del *ArrayList* y devuelve su posición o -1 si no lo encuentra.

      :param element: elemento que se desea revisar en el *ArrayList*.
      :type element: T

      :returns: la posición del elemento en el *ArrayList*, -1 si no está.
      :rtype: int


   .. py:method:: change_info(new_info: DISClib.Utils.default.T, pos: int) -> None

      *change_info()* cambia la información de un elemento en la posición especificada del *ArrayList*.

      :param new_info: nueva información que se desea para el elemento.
      :type new_info: T
      :param pos: posición del elemento que se desea cambiar.
      :type pos: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición es inválida.


   .. py:method:: exchange(pos1: int, pos2: int) -> None

      *exchange()* intercambia la información de dos elementos en dos posiciones especificadas del *ArrayList*.

      :param pos1: posición del primer elemento.
      :type pos1: int
      :param pos2: posición del segundo elemento.
      :type pos2: int

      :raises Exception: error si la estructura está vacía.
      :raises Exception: error si la posición del primer elemento es inválida.
      :raises Exception: error si la posición del segundo elemento es inválida.


   .. py:method:: sublist(start: int, end: int) -> ArrayList[T]

      *sublist()* crea una sublista de la estructura según dos posiciones dentro del *ArrayList* original.

      :param start: posición inicial de la sublista.
      :type start: int
      :param end: posición final de la sublista.
      :type end: int

      :raises IndexError: error si la estructura está vacía.
      :raises IndexError: error si la posición inicial o final son inválidas.

      :returns: una sublista de la estructura original con la función de comparación y la llave de la estructura original.
      :rtype: ArrayList[T]


   .. py:method:: concat(other: ArrayList[T]) -> ArrayList[T]

      *concat()* concatena dos estructuras de datos *ArrayList* para crear una estructura con los elementos de las dos estructuras.

      :param other: estructura de datos *ArrayList* que se desea concatenar con la estructura original.
      :type other: ArrayList[T]

      :raises TypeError: error si la estructura que se desea concatenar no es un *ArrayList*.
      :raises TypeError: error si la llave de la estructura que se desea unir no es la misma que la llave de la estructura original.
      :raises TypeError: error si la función de comparación de la estructura que se desea unir no es la misma que la función de comparación de la estructura original.

      :returns: Estructura de datos original *ArrayList* que contiene los elementos de las dos estructuras originales.
      :rtype: ArrayList[T]


   .. py:method:: __iter__()

      *__iter__()* iterador nativo de Python personalizado para el *ArrayList*. Permite utilizar los ciclos *for* de Python para recorrer los elementos de la estructura.

      :returns: iterador Python sobre los elementos del *ArrayList*.
      :rtype: __iter__


   .. py:method:: __len__() -> int

      *__len__()* función nativa de Python personalizada para el *ArrayList*. Permite utilizar la función *len()* de Python para recuperar el tamaño del *ArrayList*.

      :returns: tamaño del *ArrayList*.
      :rtype: int



