:py:mod:`DISClib.DataStructures.node`
=====================================

.. py:module:: DISClib.DataStructures.node

.. autoapi-nested-parse::

   Este ADT representa un nodo de información de una estructura de datos dinámica, las cuales pueden ser: listas sencillas, listas doblemente encadenadas, pilas, colas, BST, RBT, entre otras.

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.node.Node




.. py:class:: Node


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   **Node** Es el ADT que representar la información de un nodo de una estructura de datos dinámica y las funciones basicas para acceder a ella. Puede utilizarse para representar un nodo de una lista sencilla o doblemente encadenada.

   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :raises TypeError: error si la información del nodo no es del tipo adecuado.

   :returns: ADT de tipo Node o nodo de información.
   :rtype: Node

   .. py:attribute:: info
      :type: Optional[DISClib.Utils.default.T]

      Es la información contenida en el nodo.

   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada para manejar los errores que se presentan en la clase Node.

      Si se presenta un error en Node, se formatea el error según el contexto (paquete/clase), la función que lo generó y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun se considere conveniente.

      :param err: Excepción que se generó en el Node.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que la información del nodo sea del tipo especificado.

      :param element: elemento que se quiere verificar en el nodo.
      :type element: T

      :raises TypeError: error si la información del nodo no es del tipo adecuado.

      :returns: operador que indica si el tipo de dato del elemento es el mismo que el tipo de dato de los elementos que ya contiene la estructura de datos.
      :rtype: bool


   .. py:method:: set_info(info: DISClib.Utils.default.T) -> None

      *set_info()* introduce la información al nodo.

      :param info: información que se quiere introducir al nodo.
      :type info: T


   .. py:method:: get_info() -> DISClib.Utils.default.T

      *get_info()* recupera la información del nodo.

      :returns: información del nodo.
      :rtype: T



