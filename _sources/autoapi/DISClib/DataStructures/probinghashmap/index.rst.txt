:py:mod:`DISClib.DataStructures.probinghashmap`
===============================================

.. py:module:: DISClib.DataStructures.probinghashmap


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.probinghashmap.newMap
   DISClib.DataStructures.probinghashmap.put
   DISClib.DataStructures.probinghashmap.contains
   DISClib.DataStructures.probinghashmap.get
   DISClib.DataStructures.probinghashmap.remove
   DISClib.DataStructures.probinghashmap.size
   DISClib.DataStructures.probinghashmap.isEmpty
   DISClib.DataStructures.probinghashmap.findSlot
   DISClib.DataStructures.probinghashmap.isAvailable
   DISClib.DataStructures.probinghashmap.rehash



.. py:function:: newMap(numelements, prime, loadfactor, cmpfunction, datastructure)

   Crea una tabla de simbolos (map) sin orden

   Crea una tabla de hash con capacidad igual a nuelements
   (primo mas cercano al doble de numelements).
   prime es un número primo utilizado para  el cálculo de los codigos
   de hash, si no es provisto se  utiliza el primo 109345121.

   :param numelements: Tamaño inicial de la tabla
   :param prime: Número primo utilizado en la función MAD
   :param loadfactor: Factor de carga maximo de la tabla
   :param cmpfunction: Funcion de comparación entre llaves
   :param datastructure: estructura de datos seleccionada

   :returns: Un nuevo map

   :raises Exception:


.. py:function:: put(map, key, value)

   Ingresa una pareja llave,valor a la tabla de hash.
   Si la llave ya existe en la tabla, se reemplaza el valor

   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja
   :param value: el valor asociado a la pareja

   :returns: El map

   :raises Exception:


.. py:function:: contains(map, key)

   Retorna True si la llave key se encuentra en el map
       o False en caso contrario.
   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja

   :returns: True / False

   :raises Exception:


.. py:function:: get(map, key)

   Retorna la pareja llave, valor, cuya llave sea igual a key
   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja

   :returns: Una pareja <llave,valor>

   :raises Exception:


.. py:function:: remove(map, key)

   Elimina la pareja llave,valor, donde llave == key.
   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja

   :returns: El map

   :raises Exception:


.. py:function:: size(map)

   Retorna  el número de entradas en la tabla de hash.
   :param map: El map

   :returns: Tamaño del map

   :raises Exception:


.. py:function:: isEmpty(map)

   Informa si la tabla de hash se encuentra vacia
   :param map: El map

   :returns: El map esta vacio
             False: El map no esta vacio
   :rtype: True

   :raises Exception:


.. py:function:: findSlot(map, key, hashvalue, cmpfunction)

   Encuentra una posición libre en la tabla de hash.
   map: la tabla de hash
   key: la llave
   hashvalue: La posición inicial de la llave
   cmpfunction: funcion de comparación para la búsqueda de la llave


.. py:function:: isAvailable(table, pos)

   Informa si la posición pos esta disponible en la tabla de hash.
   Se entiende que una posición está disponible
   si su contenido es igual a None (no se ha usado esa posicion)
   o a __EMPTY__ (la posición fue liberada)


.. py:function:: rehash(map)

   Se aumenta la capacidad de la tabla al doble y se hace rehash de
   todos los elementos de la tabla.


