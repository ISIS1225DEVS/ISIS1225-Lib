:py:mod:`DISClib.ADT`
=====================

.. py:module:: DISClib.ADT


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   dynamic/index.rst
   graph/index.rst
   indexminpq/index.rst
   lists/index.rst
   maps/index.rst
   minpq/index.rst
   orderedmap/index.rst
   queue/index.rst
   stack/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.ADT.DynamicImporter
   DISClib.ADT.Queue
   DISClib.ADT.Stack



Functions
~~~~~~~~~

.. autoapisummary::

   DISClib.ADT.List
   DISClib.ADT.Map



Attributes
~~~~~~~~~~

.. autoapisummary::

   DISClib.ADT.file_path
   DISClib.ADT.file_dir


.. py:class:: DynamicImporter(implementation: str, package: str, **kwargs)


   **DynamicImporter** permite importar dinámicamente módulos y clases de módulos según la configuración de un archivo JSON y las especificaciones del usuario.

   :raises ValueError: no se puede importar el módulo especificado.

   :returns: instancia de la clase dinámica.
   :rtype: DynamicImporter

   .. py:attribute:: package
      :type: str
      :value: ''

      Nombre del paquete en el directorio de compilación.

   .. py:attribute:: implementation
      :type: str
      :value: ''

      Nombre del paquete en el directorio dentro del código fuente.

   .. py:attribute:: _module

      Referencia privada al módulo dinámico.

   .. py:attribute:: _class

      Referencia privada a la clase dinámica seleccionada.

   .. py:attribute:: _instance

      Referencia privada a la instancia de la clase dinámica seleccionada.

   .. py:method:: __post_init__()

      *__post_init__()* función post inicialización. Permite cambiar el nombre de la clase dinámica por el nombre de la clase concreta seleccionada por el usuario.



   .. py:method:: __repr__() -> str

      *__repr__* función de representación. Permite representar la clase dinámica como la clase concreta seleccionada por el usuario.

      :returns: representación de la clase concreta seleccionada.
      :rtype: str


   .. py:method:: get_instance()

      *get_instance()* retorna la instancia de la clase concreta seleccionada por el usuario.

      :returns: instancia de la clase concreta seleccionada.
      :rtype: dataclass


   .. py:method:: __class__() -> type
      :classmethod:

      *__class__* retorna el tipo de la clase concreta seleccionada por el usuario.

      :returns: tipo de la clase concreta seleccionada.
      :rtype: type


   .. py:method:: __instancecheck__(instance) -> bool
      :classmethod:

      *__instancecheck__* permite verificar si una instancia es de la clase concreta seleccionada por el usuario.

      :param instance: instancia a verificar.
      :type instance: T

      :returns: True si la instancia es de la clase concreta seleccionada.
      :rtype: bool



.. py:function:: List(dstruct: str = 'ArrayList', **kwargs) -> DISClib.Utils.default.T

   *List()* Función dinámica que que retorna una instancia del ADT List según el tipo de estructura de datos seleccionada por el usuario.

   :param dstruct: Tipo de estructura de datos a instanciar. Por defecto es "ArrayList". Puende ser "ArrayList", "SingleLinked" o "DoubleLinked".
   :type dstruct: str, optional

   :raises ValueError: error si el tipo de estructura de datos seleccionada no es válida.

   :returns: instancia del ADT List que puede ser "ArrayList", "SingleLinked" o "DoubleLinked".
   :rtype: T


.. py:class:: Queue


   Bases: :py:obj:`DISClib.DataStructures.singlelinkedlist.SingleLinked`, :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   *Queue* Clase que representa una cola implementada sobre una lista sencillamente encadenada ('SingleLinked'). Esta cola o fila (queue) es un Tipo Abstracto de Datos (TAD/ADT) que permite almacenar una colección de elementos y operarlos en el mismo orden en que fueron agregados (FIFO - Firts In First Out).

   Ademas, la clase 'Queue' esta implementada con la anotación '@dataclass' de python y el decorador 'Generic[T]' para indicar que es una estructura de datos genérica.

   *IMPORTANTE:* 'Queue' extiende de la clase 'SingleLinked', por lo que hereda todos sus parametros internos y funciones.

   :param SingleLinked: ADT DISClib que implementa las funciones básicas de una lista sencillamente encadenada.
   :type SingleLinked: dataclass
   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo Queue, Cola o Fila, implementado sobre una lista sencillamente encadenada.
   :rtype: Queue

   .. py:method:: enqueue(element: DISClib.Utils.default.T) -> None

      *enqueue()* agrega un elemento en el final de la cola/fila (Queue).

      :param element: elemento que se quiere agregar al Queue.
      :type element: T


   .. py:method:: dequeue() -> DISClib.Utils.default.T

      *dequeue()* elimina y retorna el elemento en la primer posición de la cola/fila Queue.

      :returns: el elemento en la primera posición de la cola/fila Queue.
      :rtype: T


   .. py:method:: peek() -> Optional[DISClib.Utils.default.T]

      *peek()* lee el primer elemento de la cola/fila Queue sin eliminarlo.

      :returns: elemento en la primer posición de la cola/fila Queue.
      :rtype: T


   .. py:method:: is_empty() -> bool

      *is_empty()* informa si la cola/fila Queue esta vacía o no.

      :returns: operador que indica si la cola/fila Queue esta vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* Función que informa el número de elementos en la fila/cola Queue.

      :returns: número de elementos en el Queue.
      :rtype: int



.. py:class:: Stack


   Bases: :py:obj:`DISClib.DataStructures.doublelinkedlist.DoubleLinked`, :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   *Stack* Clase que representa una pila implementada sobre una lista doblemente encadenada ('DoubleLinked'). Esta pila (Stack) es un Tipo Abstracto de Datos (TAD/ADT) que permite almacenar una colección de elementos y operarlos en el mismo orden en que fueron agregados (LIFO - Last In First Out).

   Ademas, la clase 'Stack' esta implementada con la anotación '@dataclass' de python y el decorador 'Generic[T]' para indicar que es una estructura de datos genérica.

   *IMPORTANTE:* 'Stack' extiende de la clase 'DoubleLinked', por lo que hereda todos sus parametros internos y funciones.

   :param DoubleLinked: ADT DISClib que implementa las funciones básicas de una lista doblemente encadenada.
   :type DoubleLinked: dataclass
   :param Generic: TAD (Tipo Abstracto de Datos) o ADT (Abstract Data Type) para una estructura de datos genéricas en python.
   :type Generic: T

   :returns: ADT de tipo Stack o Pila, implementado sobre una lista doblemente encadenada.
   :rtype: Stack

   .. py:method:: push(element: DISClib.Utils.default.T) -> None

      *push()* agrega un elemento en el tope de la pila (Stack).

      :param element: elemento que se quiere agregar al Stack.
      :type element: T


   .. py:method:: pop() -> DISClib.Utils.default.T

      *pop()* elimina y retorna el elemento en tope de la pila (Stack).

      :returns: el elemento en en el tope de la pila (Stack).
      :rtype: T


   .. py:method:: top() -> Optional[DISClib.Utils.default.T]

      *top()* retorna el elemento en el tope de la pila (Stack).

      :returns: el elemento en la primera posición de la pila (Stack).
      :rtype: T


   .. py:method:: is_empty() -> bool

      *is_empty()* informa si la pila Stack esta vacía o no.

      :returns: operador que indica si la pila Stack esta vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* Función que informa el número de elementos en la pila Stack.

      :returns: número de elementos en el Stack.
      :rtype: int



.. py:function:: Map(dstruct: str = 'SeparateChaining', **kwargs) -> DISClib.Utils.default.T

   *Map()* Función dinámica que retorna una instancia del ADT Map según el tipo de estructura de datos seleccionada por el usuario.

   :param dstruct: Tipo de estructura de datos a instanciar. Por defecto es "SeparateChaining". Puende ser "SeparateChaining" o "LinearProbing".
   :type dstruct: str, optional

   :raises ValueError: error si el tipo de estructura de datos seleccionada no es válida.

   :returns: instancia del ADT Map que puede ser "SeparateChaining" o "LinearProbing".
   :rtype: T


.. py:data:: file_path

   

.. py:data:: file_dir

   

