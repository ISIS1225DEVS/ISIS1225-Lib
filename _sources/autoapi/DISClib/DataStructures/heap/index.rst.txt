:py:mod:`DISClib.DataStructures.heap`
=====================================

.. py:module:: DISClib.DataStructures.heap

.. autoapi-nested-parse::

   * Copyright 2020, Departamento de sistemas y Computación,
   * Universidad de Los Andes
   *
   * Desarrollado para el curso ISIS1225 - Estructuras de Datos y Algoritmos
   *
   *
   * This program is free software: you can redistribute it and/or modify
   * it under the terms of the GNU General Public License as published by
   * the Free Software Foundation, either version 3 of the License, or
   * (at your option) any later version.
   *
   * This program is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU General Public License for more details.
   *
   * You should have received a copy of the GNU General Public License
   * along with this program.  If not, see <http://www.gnu.org/licenses/>.
   *
   * Contribución de:
   *
   * Dario Correal
   *



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.heap.newHeap
   DISClib.DataStructures.heap.size
   DISClib.DataStructures.heap.isEmpty
   DISClib.DataStructures.heap.min
   DISClib.DataStructures.heap.insert
   DISClib.DataStructures.heap.delMin
   DISClib.DataStructures.heap.swim
   DISClib.DataStructures.heap.sink
   DISClib.DataStructures.heap.greater
   DISClib.DataStructures.heap.exchange



.. py:function:: newHeap(cmpfunction)

   Crea un nuevo heap basado en un arreglo, cuyo primer elemento
   es inicializado en None y no será utilizado

   :param cmpfunction: La función de comparacion
   :param size: El numero de elementos

   :returns: El heap

   :raises Exception:


.. py:function:: size(heap)

   Retorna el número de elementos en el heap

   :param heap: El arreglo con la informacion

   :returns: El tamaño del heap

   :raises Exception:


.. py:function:: isEmpty(heap)

   Indica si el heap está vacío

   :param heap: El arreglo con la informacion

   :returns: True si el heap es vacio

   :raises Exception:


.. py:function:: min(heap)

   Retorna el primer elemento del heap, es decir el menor elemento

   :param heap: El arreglo con la informacion

   :returns: El menor elemento del heap

   :raises Exception:


.. py:function:: insert(heap, element)

   Guarda la pareja llave-valor en el heap. Lo guarda en la última
   posición y luego hace swim del elemento

   :param heap: El arreglo con la informacion
   :param element: El elemento a guardar

   :returns: El heap con el nuevo elemento

   :raises Exception:


.. py:function:: delMin(heap)

   Retorna el menor elemento del heap y lo elimina.
   Se reemplaza con el último elemento y se hace sink.

   :param heap: El arreglo con la informacion

   :returns: El menor elemento eliminado

   :raises Exception:


.. py:function:: swim(heap, pos)

   Ubica en el lugar indicado un elemento adicionado
   en la última posición

   :param heap: El arreglo con la informacion
   :param pos: posicion en el arreglo a revisar

   :returns: El arreglo en forma de heap

   :raises Exception:


.. py:function:: sink(heap, pos)

   Ubica en la posición correcta un elemento ubicado en la raíz del heap

   :param heap: El arreglo con la informacion
   :param pos: posicion en el arreglo a revisar

   :returns: El arreglo en forma de heap

   :raises Exception:


.. py:function:: greater(heap, element1, element2)

   Indica si el elemento 1 es mayor que el elemento 2


.. py:function:: exchange(heap, posa, posb)

   Intercambia los elementos en las posiciones posa y posb del heap


