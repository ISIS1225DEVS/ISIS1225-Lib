:py:mod:`DISClib.Utils.numbers`
===============================

.. py:module:: DISClib.Utils.numbers

.. autoapi-nested-parse::

   Módulo con funciones de utilidad para el manejo de datos en los mapas no ordenados en *DISClib*. Especificamente para tablas de Hash por Encadenamiento Separado (Separate Chaining) y tablas de Hash por Sondeo Lineal (Linear Probing).

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.

   *NOTA:* código contribuido por Sanjit_Prasad en https://www.geeksforgeeks.org/prime-numbers/



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   DISClib.Utils.numbers.is_prime
   DISClib.Utils.numbers.next_prime
   DISClib.Utils.numbers.previous_prime
   DISClib.Utils.numbers.hash_compress



.. py:function:: is_prime(n: int) -> bool

   *is_prime()* revisa si un número es primo o no.

   :param n: número entero para verificar si es primo.
   :type n: int

   :returns: si el número es primo o no.
   :rtype: bool


.. py:function:: next_prime(n: int) -> int

   *next_prime()* devuelve el siguiente número primo mayor que n.

   :param n: número entero para calcular el siguiente número primo.
   :type n: int

   :returns: el siguiente número primo mayor que n.
   :rtype: int


.. py:function:: previous_prime(n: int) -> int

   *previous_prime()* devuelve el número primo anterior a n.

   :param n: número entero para calcular el siguiente número primo.
   :type n: int

   :returns: el siguiente número primo menor que n.
   :rtype: int


.. py:function:: hash_compress(key: DISClib.Utils.default.T, scale: int, shift: int, prime: int, mcapacity: int) -> int

   *hash_compress()* función de compresión para los índices de las tablas de Hash utilizando el método MAD (Multiply-Add-and-Divide).
   MAD se define como: hash_compress(y) = ((a*y + b) % p) % M, donde:
       a (scale) y b (shift) enteros aleatoreos dentro del intervalo [0,p-1], con a > 0
       p (prime) es un primo mayor a M,
       M (capacity) es el tamaño de la tabla, primo

   :param key: llave para calcular el índice en la tabla de Hash, Puede ser cualquier tipo de dato.
   :type key: T
   :param scale: pendiente de la función de compresión.
   :type scale: int
   :param shift: desplazamiento de la función de compresión.
   :type shift: int
   :param prime: número  primo mucho mayor a la capacidad de la tabla de Hash.
   :type prime: int
   :param mcapacity: tamaño de la tabla de Hash, es un número primo para evitar colisiones.
   :type mcapacity: int

   :returns: el índice del elemento en la tabla de Hash.
   :rtype: int


