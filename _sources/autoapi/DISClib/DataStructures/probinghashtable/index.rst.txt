:py:mod:`DISClib.DataStructures.probinghashtable`
=================================================

.. py:module:: DISClib.DataStructures.probinghashtable

.. autoapi-nested-parse::

   # -*- coding: utf-8 -*-
   # TODO add docstring

   *IMPORTANTE:* Este código y sus especificaciones para Python están basados en las implementaciones propuestas por los siguientes autores/libros:

       #. Algorithms, 4th Edition, Robert Sedgewick y Kevin Wayne.
       #. Data Structure and Algorithms in Python, M.T. Goodrich, R. Tamassia, M.H. Goldwasser.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.probinghashtable.LinearProbing



Functions
~~~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.probinghashtable.newMap
   DISClib.DataStructures.probinghashtable.put
   DISClib.DataStructures.probinghashtable.contains
   DISClib.DataStructures.probinghashtable.get
   DISClib.DataStructures.probinghashtable.remove
   DISClib.DataStructures.probinghashtable.size
   DISClib.DataStructures.probinghashtable.isEmpty
   DISClib.DataStructures.probinghashtable.keySet
   DISClib.DataStructures.probinghashtable.valueSet
   DISClib.DataStructures.probinghashtable.hashValue
   DISClib.DataStructures.probinghashtable.findSlot
   DISClib.DataStructures.probinghashtable.isAvailable
   DISClib.DataStructures.probinghashtable.rehash
   DISClib.DataStructures.probinghashtable.isPrime
   DISClib.DataStructures.probinghashtable.nextPrime
   DISClib.DataStructures.probinghashtable.defaultcompare



Attributes
~~~~~~~~~~

.. autoapisummary::

   DISClib.DataStructures.probinghashtable.DEFAULT_CHAINING_ALPHA
   DISClib.DataStructures.probinghashtable.MIN_CHAINING_ALPHA
   DISClib.DataStructures.probinghashtable.MAX_CHAINING_ALPHA


.. py:data:: DEFAULT_CHAINING_ALPHA
   :type: float
   :value: 4.0

   

.. py:data:: MIN_CHAINING_ALPHA
   :type: float
   :value: 1.0

   

.. py:data:: MAX_CHAINING_ALPHA
   :type: float
   :value: 8.0

   

.. py:class:: LinearProbing


   Bases: :py:obj:`Generic`\ [\ :py:obj:`DISClib.Utils.default.T`\ ]

   *LinearProbing* Es una clase que representa una tabla de hash con el método de encadenamiento por de separación (Separate Chaining). Donde la llave es única para cada valor y el valor puede ser cualquier tipo de dato.

   :param Generic: Tipo de dato genérico dentro del registro del mapa.
   :type Generic: T

   :raises TypeError: error si la información del registro del mapa (llave o valor) no son del tipo adecuado.

   :returns: ADT de tipo LinearProbing o tabla de hash con separación por encadenamiento.
   :rtype: LinearProbing

   .. py:attribute:: iodata
      :type: Optional[List[DISClib.Utils.default.T]]

      Lista nativa de Python que contiene los elementos de entrada a la estructura, por defecto es None y el usuario puede incluir una lista nativa de python como argumento.

   .. py:attribute:: elements
      :type: int
      :value: 1

      Es el espacio reservado para la tabla de hash (n), por defecto es 1, pero debe configurarse según el número de elementos que se espera almacenar.

   .. py:attribute:: aLpha
      :type: Optional[float]

      Es el factor de carga con el que se inicializa la tabla de hash, por defecto es 4.0.

   .. py:attribute:: prime
      :type: Optional[int]

      Es el número primo utilizado para calcular el código hash de la llave con la función de compresión MAD, por defecto es 109345121.

   .. py:attribute:: table
      :type: DISClib.DataStructures.arraylist.ArrayList[DISClib.DataStructures.mapentry.MapEntry[DISClib.Utils.default.T]]

      Es el indice de la tabla de hash donde se almacenan los 'Buckets', implementado con un 'ArrayList' de DISCLib. en el __post_init__ se inicializa con la capacidad inicial de la tabla de hash.

   .. py:attribute:: rehashable
      :type: bool
      :value: True

      Es un booleano que indica si la tabla de hash se puede reconstruir utilizando el método de rehash, por defecto es True.

   .. py:attribute:: capacity
      :type: int
      :value: 1

      Es la capacidad (m) con la que se inicializa la tabla de hash.

   .. py:attribute:: _size
      :type: int
      :value: 0

      Es el número de elementos dentro de la tabla de hash, por defecto es 0 y se actualiza con cada operación que modifica la estructura.

   .. py:attribute:: _collisions
      :type: Optional[int]
      :value: 0

      Es el número de colisiones en la tabla de hash.

   .. py:attribute:: _scale
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _shift
      :type: Optional[int]
      :value: 0

      Es el número utilizado para calcular el código hash de la llave.

   .. py:attribute:: _limit_factor
      :type: Optional[float]
      :value: 0

      Es el factor de carga limite antes de hacer rehash.

   .. py:attribute:: _current_factor
      :type: Optional[float]
      :value: 0

      Es el factor de carga actual de la tabla de hash.

   .. py:attribute:: cmp_function
      :type: Optional[Callable[[DISClib.Utils.default.T, DISClib.Utils.default.T], int]]

      Función de comparación opcional que se utiliza para comparar los elementos del LinearProbing, por defecto es 'None' y el __post_init__ configura la función por defecto lt_default_cmp_funcion().

   .. py:attribute:: key
      :type: Optional[str]

      Nombre de la llave opcional que se utiliza para comparar los elementos del LinearProbing, Por defecto es 'None' y el __post_init__ configura la llave por defecto la llave 'id' en DEFAULT_DICT_KEY.

   .. py:method:: __post_init__() -> None


   .. py:method:: default_cmp_function(elm1, elm2) -> int

      *default_cmp_function()* procesa con algoritmica por defecto la lista de elementos que procesa el LinearProbing. Es una función crucial para que la estructura de datos funcione correctamente.

      :param elm1: primer elemento a comparar.
      :type elm1: Any
      :param elm2: segundo elemento a comparar.
      :type elm2: Any

      :returns: respuesta de la comparación entre los elementos, 0 si son iguales, 1 si elm1 es mayor que elm2, -1 si elm1 es menor.
      :rtype: int


   .. py:method:: _handle_error(err: Exception) -> None

      *_handle_error()* función privada que maneja los errores que se pueden presentar en el LinearProbing.

      Si se presenta un error en el LinearProbing, se formatea el error según el contexto (paquete/clase) y la función que lo generó, y lo reenvia al componente superior en la jerarquía de llamados para manejarlo segun sea considere conveniente.

      :param err: Excepción que se generó en el LinearProbing.
      :type err: Exception


   .. py:method:: _check_type(element: DISClib.Utils.default.T) -> bool

      *_check_type()* función privada que verifica que el tipo de dato del elemento que se quiere agregar al LinearProbing sea del mismo tipo contenido dentro de los elementos del LinearProbing.

      :raises TypeError: error si el tipo de dato del elemento que se quiere agregar no es el mismo que el tipo de dato de los elementos que ya contiene el LinearProbing.

      :param element: elemento que se quiere procesar en LinearProbing.
      :type element: T

      :returns: operador que indica si el ADT LinearProbing es del mismo tipo que el elemento que se quiere procesar.
      :rtype: bool


   .. py:method:: is_empty() -> bool

      *is_empty()* revisa si el LinearProbing está vacío.

      :returns: operador que indica si la estructura LinearProbing está vacía.
      :rtype: bool


   .. py:method:: size() -> int

      *size()* devuelve el numero de elementos que actualmente contiene el LinearProbing.

      :returns: tamaño de la estructura LinearProbing.
      :rtype: int


   .. py:method:: contains(key: DISClib.Utils.default.T) -> bool


   .. py:method:: put(key: DISClib.Utils.default.T, value: DISClib.Utils.default.T) -> None


   .. py:method:: get(key: DISClib.Utils.default.T) -> Optional[DISClib.Utils.default.T]


   .. py:method:: remove(key: DISClib.Utils.default.T) -> None


   .. py:method:: keys() -> DISClib.DataStructures.arraylist.ArrayList[DISClib.Utils.default.T]


   .. py:method:: values() -> DISClib.DataStructures.arraylist.ArrayList[DISClib.Utils.default.T]


   .. py:method:: rehash() -> None



.. py:function:: newMap(numelements, prime, loadfactor, cmpfunction, datastructure)

   Crea una tabla de simbolos (map) sin orden

   Crea una tabla de hash con capacidad igual a nuelements
   (primo mas cercano al doble de numelements).
   prime es un número primo utilizado para  el cálculo de los codigos
   de hash, si no es provisto se  utiliza el primo 109345121.

   :param numelements: Tamaño inicial de la tabla
   :param prime: Número primo utilizado en la función MAD
   :param loadfactor: Factor de carga maximo de la tabla
   :param cmpfunction: Funcion de comparación entre llaves
   :param datastructure: estructura de datos seleccionada

   :returns: Un nuevo map

   :raises Exception:


.. py:function:: put(map, key, value)

   Ingresa una pareja llave,valor a la tabla de hash.
   Si la llave ya existe en la tabla, se reemplaza el valor

   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja
   :param value: el valor asociado a la pareja

   :returns: El map

   :raises Exception:


.. py:function:: contains(map, key)

   Retorna True si la llave key se encuentra en el map
       o False en caso contrario.
   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja

   :returns: True / False

   :raises Exception:


.. py:function:: get(map, key)

   Retorna la pareja llave, valor, cuya llave sea igual a key
   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja

   :returns: Una pareja <llave,valor>

   :raises Exception:


.. py:function:: remove(map, key)

   Elimina la pareja llave,valor, donde llave == key.
   :param map: El map a donde se guarda la pareja
   :param key: la llave asociada a la pareja

   :returns: El map

   :raises Exception:


.. py:function:: size(map)

   Retorna  el número de entradas en la tabla de hash.
   :param map: El map

   :returns: Tamaño del map

   :raises Exception:


.. py:function:: isEmpty(map)

   Informa si la tabla de hash se encuentra vacia
   :param map: El map

   :returns: El map esta vacio
             False: El map no esta vacio
   :rtype: True

   :raises Exception:


.. py:function:: keySet(map)

   Retorna una lista con todas las llaves de la tabla de hash

   :param map: El map

   :returns: lista de llaves

   :raises Exception:


.. py:function:: valueSet(map)

   Retorna una lista con todos los valores de la tabla de hash

   :param map: El map

   :returns: lista de valores

   :raises Exception:


.. py:function:: hashValue(table, key)

   Calcula un hash para una llave, utilizando el método
   MAD : hashValue(y) = ((ay + b) % p) % M.
   Donde:
   M es el tamaño de la tabla, primo
   p es un primo mayor a M,
   a y b enteros aleatoreos dentro del intervalo [0,p-1], con a>0


.. py:function:: findSlot(map, key, hashvalue, cmpfunction)

   Encuentra una posición libre en la tabla de hash.
   map: la tabla de hash
   key: la llave
   hashvalue: La posición inicial de la llave
   cmpfunction: funcion de comparación para la búsqueda de la llave


.. py:function:: isAvailable(table, pos)

   Informa si la posición pos esta disponible en la tabla de hash.
   Se entiende que una posición está disponible
   si su contenido es igual a None (no se ha usado esa posicion)
   o a __EMPTY__ (la posición fue liberada)


.. py:function:: rehash(map)

   Se aumenta la capacidad de la tabla al doble y se hace rehash de
   todos los elementos de la tabla.


.. py:function:: isPrime(n)


.. py:function:: nextPrime(N)


.. py:function:: defaultcompare(key, element)


